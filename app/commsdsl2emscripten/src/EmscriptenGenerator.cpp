//
// Copyright 2022 - 2025 (C). Alex Robenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "EmscriptenGenerator.h"

#include "EmscriptenBitfieldField.h"
#include "EmscriptenBundleField.h"
#include "EmscriptenChecksumLayer.h"
#include "EmscriptenCmake.h"
#include "EmscriptenComms.h"
#include "EmscriptenCustomLayer.h"
#include "EmscriptenDataBuf.h"
#include "EmscriptenDataField.h"
#include "EmscriptenEnumField.h"
#include "EmscriptenFloatField.h"
#include "EmscriptenFrame.h"
#include "EmscriptenIdLayer.h"
#include "EmscriptenInterface.h"
#include "EmscriptenIntField.h"
#include "EmscriptenListField.h"
#include "EmscriptenMessage.h"
#include "EmscriptenNamespace.h"
#include "EmscriptenOptionalField.h"
#include "EmscriptenPayloadLayer.h"
#include "EmscriptenProtocolOptions.h"
#include "EmscriptenRefField.h"
#include "EmscriptenSchema.h"
#include "EmscriptenSetField.h"
#include "EmscriptenSizeLayer.h"
#include "EmscriptenStringField.h"
#include "EmscriptenSyncLayer.h"
#include "EmscriptenValueLayer.h"
#include "EmscriptenVariantField.h"
#include "EmscriptenVersion.h"

#include "commsdsl/gen/comms.h"
#include "commsdsl/gen/strings.h"
#include "commsdsl/gen/util.h"
#include "commsdsl/version.h"

#include <algorithm>
#include <cassert>
#include <filesystem>
#include <fstream>
#include <map>

namespace comms = commsdsl::gen::comms;
namespace fs = std::filesystem;
namespace strings = commsdsl::gen::strings;
namespace util = commsdsl::gen::util;

namespace commsdsl2emscripten
{

EmscriptenGenerator::EmscriptenGenerator()
{
    GenBase::genSetAllInterfacesReferencedByDefault(false);
    GenBase::genSetAllMessagesReferencedByDefault(false);
}    

const std::string& EmscriptenGenerator::emscriptenFileGeneratedComment()
{
    static const std::string Str =
        "// Generated by commsdsl2emscripten v" + std::to_string(commsdsl::versionMajor()) +
        '.' + std::to_string(commsdsl::versionMinor()) + '.' +
        std::to_string(commsdsl::versionPatch()) + '\n';
    return Str;
}

std::string EmscriptenGenerator::emscriptenClassName(const commsdsl::gen::GenElem& elem) const
{
    bool addMainNamespace = m_mainNamespaceInNamesForced || (genSchemas().size() > 1U); 
    auto str = comms::genScopeFor(elem, *this, addMainNamespace);
    return emscriptenScopeToName(str);
}

std::string EmscriptenGenerator::emscriptenScopeNameForRoot(const std::string& name) const
{
    bool addMainNamespace = m_mainNamespaceInNamesForced || (genSchemas().size() > 1U); 
    auto str = comms::genScopeForRoot(name, *this, addMainNamespace);
    return emscriptenScopeToName(str);
}

std::string EmscriptenGenerator::emscriptenScopeNameForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    bool addMainNamespace = m_mainNamespaceInNamesForced || (genSchemas().size() > 1U); 
    auto str = comms::genScopeForNamespaceMember(name, *this, parent, addMainNamespace);
    return emscriptenScopeToName(str);
}

std::string EmscriptenGenerator::emscriptenProtocolClassNameForRoot(const std::string& name) const
{
    auto schemaIdx = genCurrentSchemaIdx();
    genChooseProtocolSchema();
    auto str = emscriptenScopeNameForRoot(name);
    genChooseCurrentSchema(schemaIdx);
    return str;
}

std::string EmscriptenGenerator::emscriptenRelHeaderForRoot(const std::string& name) const
{
    return genGetTopNamespace() + '/' + comms::genRelHeaderForRoot(name, *this);
}

std::string EmscriptenGenerator::emscriptenRelHeaderForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    return genGetTopNamespace() + '/' + comms::genRelHeaderForNamespaceMember(name, *this, parent);
}

std::string EmscriptenGenerator::emscriptenAbsHeaderForRoot(const std::string& name) const
{
    return genGetOutputDir() + '/' + strings::genIncludeDirStr() + '/' + emscriptenRelHeaderForRoot(name);
}

std::string EmscriptenGenerator::emscriptenAbsHeaderForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    return genGetOutputDir() + '/' + strings::genIncludeDirStr() + '/' + emscriptenRelHeaderForNamespaceMember(name, parent);
}

std::string EmscriptenGenerator::emscriptenRelSourceForRoot(const std::string& name) const
{
    return genGetTopNamespace() + '/' + comms::genRelSourceForRoot(name, *this);
}

std::string EmscriptenGenerator::emscriptenRelSourceForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    return genGetTopNamespace() + '/' + comms::genRelSourceForNamespaceMember(name, *this, parent);
}

std::string EmscriptenGenerator::emscriptenAbsSourceForRoot(const std::string& name) const
{
    return genGetOutputDir() + '/' + emscriptenRelSourceForRoot(name);
}

std::string EmscriptenGenerator::emscriptenAbsSourceForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    return genGetOutputDir() + '/' + emscriptenRelSourceForNamespaceMember(name, parent);
}

std::string EmscriptenGenerator::emscriptenProtocolRelHeaderForRoot(const std::string& name) const
{
    auto schemaIdx = genCurrentSchemaIdx();
    genChooseProtocolSchema();
    auto str = emscriptenRelHeaderForRoot(name);
    genChooseCurrentSchema(schemaIdx);
    return str;
}

std::string EmscriptenGenerator::emscriptenProtocolRelHeaderForNamespaceMember(const std::string& name, const EmscriptenNamespace& parent) const
{
    auto schemaIdx = genCurrentSchemaIdx();
    genChooseProtocolSchema();
    auto str = emscriptenRelHeaderForNamespaceMember(name, parent);
    genChooseCurrentSchema(schemaIdx);
    return str;    
}

std::string EmscriptenGenerator::emscriptenSchemaRelSourceForRoot(unsigned schemaIdx, const std::string& name) const
{
    auto currSchemaIdx = genCurrentSchemaIdx();
    genChooseCurrentSchema(schemaIdx);
    auto str = emscriptenRelSourceForRoot(name);
    genChooseCurrentSchema(currSchemaIdx);
    return str;
}

std::string EmscriptenGenerator::emscriptenRelHeaderFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetTopNamespace() + '/' + comms::genRelHeaderPathFor(elem, *this);
}

std::string EmscriptenGenerator::emscriptenAbsHeaderFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetOutputDir() + '/' + strings::genIncludeDirStr() + '/' + emscriptenRelHeaderFor(elem);
}

std::string EmscriptenGenerator::emscriptenRelSourceFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetTopNamespace() + '/' + comms::genRelSourcePathFor(elem, *this);
}

std::string EmscriptenGenerator::emscriptenAbsSourceFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetOutputDir() + '/' + emscriptenRelSourceFor(elem);
}

std::string EmscriptenGenerator::emspriptenInputAbsHeaderFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetCodeDir() + '/' + strings::genIncludeDirStr() + '/' + emscriptenRelHeaderFor(elem);
}

std::string EmscriptenGenerator::emspriptenInputAbsSourceFor(const commsdsl::gen::GenElem& elem) const
{
    return genGetCodeDir() + '/' + emscriptenRelSourceFor(elem);
}

std::string EmscriptenGenerator::emscriptenScopeToName(const std::string& scope)
{
    return util::genStrReplace(scope, "::", "_");
}

bool EmscriptenGenerator::genCreateCompleteImpl()
{
    return 
        emscriptenReferenceRequestedInterfaceInternal() &&
        emscriptenReferenceRequestedMessagesInternal();
}

bool EmscriptenGenerator::genPrepareImpl()
{
    if (!GenBase::genPrepareImpl()) {
        return false;
    }

    if (m_forcedInterface.empty()) {
        return true;
    }
    
    auto* iFace = genFindInterface(m_forcedInterface);
    if (iFace == nullptr) {
        genLogger().genError("The selected forced interface \"" + m_forcedInterface + "\" hasn't been found");
        return false;
    }

    return true;
}

bool EmscriptenGenerator::genWriteImpl()
{
    for (auto idx = 0U; idx < genSchemas().size(); ++idx) {
        genChooseCurrentSchema(idx);
        bool result = 
            EmscriptenVersion::emscriptenWrite(*this);

        if (!result) {
            return false;
        }
    }

    return 
        EmscriptenComms::emscriptenWrite(*this) &&
        EmscriptenDataBuf::emscriptenWrite(*this) &&
        EmscriptenProtocolOptions::emscriptenWrite(*this) &&
        EmscriptenCmake::emscriptenWrite(*this) &&
        emscriptenWriteExtraFilesInternal();

}

void EmscriptenGenerator::emscriptenSetMainNamespaceInNamesForced(bool value)
{
    m_mainNamespaceInNamesForced = value;
}

void EmscriptenGenerator::emscriptenSetForcedInterface(const std::string& value)
{
    m_forcedInterface = value;
}

void EmscriptenGenerator::emscriptenSetHasProtocolVersion(bool value)
{
    m_hasProtocolVersion = value;
}

void EmscriptenGenerator::emscriptenSetMessagesListFile(const std::string& value)
{
    m_messagesListFile = value;
}

void EmscriptenGenerator::emscriptenSetForcedPlatform(const std::string& value)
{
    m_forcedPlatform = value;
}

bool EmscriptenGenerator::emscriptenHasProtocolVersion() const
{
    return m_hasProtocolVersion;
}

const EmscriptenInterface* EmscriptenGenerator::emscriptenMainInterface() const
{
    do {
        if (m_forcedInterface.empty()) {
            break;
        }

        auto iFace = genFindInterface(m_forcedInterface);
        if (iFace == nullptr) {
            break;
        }

        return static_cast<const EmscriptenInterface*>(iFace);
    } while (false);

    auto allInterfaces = genGetAllInterfaces();
    if (allInterfaces.empty()) {
        return nullptr;
    }
    return static_cast<const EmscriptenInterface*>(allInterfaces.front());
}

EmscriptenInterface* EmscriptenGenerator::emscriptenMainInterface()
{
    return const_cast<EmscriptenInterface*>(static_cast<const EmscriptenGenerator*>(this)->emscriptenMainInterface());
}

EmscriptenGenerator::GenSchemaPtr EmscriptenGenerator::genCreateSchemaImpl(commsdsl::parse::ParseSchema parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenSchema>(*this, parseObj, parent);
}

EmscriptenGenerator::GenNamespacePtr EmscriptenGenerator::genCreateNamespaceImpl(commsdsl::parse::ParseNamespace parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenNamespace>(*this, parseObj, parent);
}

EmscriptenGenerator::GenInterfacePtr EmscriptenGenerator::genCreateInterfaceImpl(commsdsl::parse::ParseInterface parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenInterface>(*this, parseObj, parent);
}

EmscriptenGenerator::GenMessagePtr EmscriptenGenerator::genCreateMessageImpl(commsdsl::parse::ParseMessage parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenMessage>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFramePtr EmscriptenGenerator::genCreateFrameImpl(commsdsl::parse::ParseFrame parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenFrame>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateIntFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenIntField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateEnumFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenEnumField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateSetFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenSetField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateFloatFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenFloatField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateBitfieldFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenBitfieldField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateBundleFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenBundleField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateStringFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenStringField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateDataFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenDataField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateListFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenListField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateRefFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenRefField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateOptionalFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenOptionalField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenFieldPtr EmscriptenGenerator::genCreateVariantFieldImpl(commsdsl::parse::ParseField parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenVariantField>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateCustomLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenCustomLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateSyncLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenSyncLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateSizeLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenSizeLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateIdLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenIdLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateValueLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenValueLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreatePayloadLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenPayloadLayer>(*this, parseObj, parent);
}

EmscriptenGenerator::GenLayerPtr EmscriptenGenerator::genCreateChecksumLayerImpl(commsdsl::parse::ParseLayer parseObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<EmscriptenChecksumLayer>(*this, parseObj, parent);
}

bool EmscriptenGenerator::emscriptenWriteExtraFilesInternal() const
{
    const std::vector<std::string> ReservedExt = {
        strings::genReplaceFileSuffixStr(),
        strings::genExtendFileSuffixStr(),
        strings::genPublicFileSuffixStr(),
        strings::genIncFileSuffixStr(),
        strings::genAppendFileSuffixStr(),
        strings::genPrependFileSuffixStr(),
        strings::genBindFileSuffixStr(),
        strings::genSourcesFileSuffixStr(),
    }; 

    return genCopyExtraSourceFiles(ReservedExt);    
}

bool EmscriptenGenerator::emscriptenReferenceRequestedInterfaceInternal()
{
    auto* mainInterface = emscriptenMainInterface();
    if (mainInterface != nullptr) {
        mainInterface->genSetReferenced(true);
    }

    return true;
}

bool EmscriptenGenerator::emscriptenReferenceRequestedMessagesInternal()
{
    if ((m_messagesListFile.empty()) && (m_forcedPlatform.empty())) {
        genReferenceAllMessages();
        return true;
    }

    if ((!m_messagesListFile.empty()) && (!m_forcedPlatform.empty())) {
        genLogger().genError("Cannot force platform messages together with explicit message list.");
        return false;
    }    

    if (!m_messagesListFile.empty()) {
        return emscriptenProcessMessagesListFileInternal();
    }

    if (!m_forcedPlatform.empty()) {
        return emscriptenProcessForcedPlatformInternal();
    }    

    return true;
}

bool EmscriptenGenerator::emscriptenProcessMessagesListFileInternal()
{
    std::ifstream stream(m_messagesListFile);
    if (!stream) {
        genLogger().genError("Failed to open messages list file: \"" + m_messagesListFile + "\".");
        return false;
    }

    std::string contents(std::istreambuf_iterator<char>(stream), (std::istreambuf_iterator<char>()));
    auto lines = util::genStrSplitByAnyChar(contents, "\n\r");

    for (auto& l : lines) {
        auto* m = genGindMessage(l);
        if (m == nullptr) {
            genLogger().genError("Failed to fined message \"" + l + "\" listed in \"" + m_messagesListFile + "\".");
            return false;
        }

        m->genSetReferenced(true);
    }

    return true;
}

bool EmscriptenGenerator::emscriptenProcessForcedPlatformInternal()
{
    bool validPlatform = false;

    assert(!m_forcedPlatform.empty());
    for (auto* m : genGetAllMessages()) {
        assert(m != nullptr);
        auto& s = genSchemaOf(*m);
        auto& schemaPlatforms = s.genParseObj().parsePlatforms();
        auto iter = std::find(schemaPlatforms.begin(), schemaPlatforms.end(), m_forcedPlatform);
        if (iter == schemaPlatforms.end()) {
            continue;
        }

        validPlatform = true;

        auto* emscriptenM = const_cast<EmscriptenMessage*>(EmscriptenMessage::emscriptenCast(m));
        auto& messagePlatforms = emscriptenM->genParseObj().parsePlatforms();

        bool messageSupported = 
            (messagePlatforms.empty()) || 
            (std::find(messagePlatforms.begin(), messagePlatforms.end(), m_forcedPlatform) != messagePlatforms.end());

        if (messageSupported) {
            emscriptenM->genSetReferenced(true);
        }
    }
    
    if (!validPlatform) {
        genLogger().genError("Unknown platform: \"" + m_forcedPlatform + "\".");
        return false;
    }

    return true;
}

} // namespace commsdsl2emscripten

//
// Copyright 2019 - 2025 (C). Alex Robenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CommsGenerator.h"

#include "CommsBitfieldField.h"
#include "CommsBundleField.h"
#include "CommsChecksumLayer.h"
#include "CommsCmake.h"
#include "CommsCustomLayer.h"
#include "CommsDataField.h"
#include "CommsDefaultOptions.h"
#include "CommsDoxygen.h"
#include "CommsEnumField.h"
#include "CommsFieldBase.h"
#include "CommsFloatField.h"
#include "CommsFrame.h"
#include "CommsInputMessages.h"
#include "CommsIntField.h"
#include "CommsListField.h"
#include "CommsIdLayer.h"
#include "CommsInterface.h"
#include "CommsMessage.h"
#include "CommsNamespace.h"
#include "CommsOptionalField.h"
#include "CommsPayloadLayer.h"
#include "CommsRefField.h"
#include "CommsSchema.h"
#include "CommsSetField.h"
#include "CommsSizeLayer.h"
#include "CommsSyncLayer.h"
#include "CommsStringField.h"
#include "CommsValueLayer.h"
#include "CommsVariantField.h"
#include "CommsVersion.h"

#include "commsdsl/version.h"
#include "commsdsl/gen/strings.h"
#include "commsdsl/gen/util.h"

#include <algorithm>
#include <cassert>
#include <iterator>
#include <filesystem>
#include <fstream>
#include <system_error>
#include <type_traits>

namespace fs = std::filesystem;
namespace strings = commsdsl::gen::strings;
namespace util = commsdsl::gen::util;

namespace commsdsl2comms
{

const std::string MinCommsVersion("5.4.3");    

const std::string& CommsGenerator::commsFileGeneratedComment()
{
    static const std::string Str =
        "// Generated by commsdsl2comms v" + std::to_string(commsdsl::versionMajor()) +
        '.' + std::to_string(commsdsl::versionMinor()) + '.' +
        std::to_string(commsdsl::versionPatch()) + '\n';
    return Str;
}

CommsGenerator::CustomizationLevel CommsGenerator::commsGetCustomizationLevel() const
{
    return m_customizationLevel;
}

void CommsGenerator::commsSetCustomizationLevel(const std::string& value)
{
    if (value.empty()) {
        return;
    }

    static const std::string Map[] = {
        /* Full */ "full",
        /* Limited */ "limited",
        /* None */ "none",        
    };
    static const std::size_t MapSize = std::extent<decltype(Map)>::value;
    static_assert(MapSize == static_cast<unsigned>(CustomizationLevel::NumOfValues));

    auto iter = std::find(std::begin(Map), std::end(Map), value);
    if (iter == std::end(Map)) {
        genLogger().genWarning("Unknown customization level \"" + value + "\", using default.");
        return;
    }

    m_customizationLevel = static_cast<CustomizationLevel>(std::distance(std::begin(Map), iter));
}

const std::string& CommsGenerator::commsGetProtocolVersion() const
{
    return m_protocolVersion;
}

void CommsGenerator::commsSetProtocolVersion(const std::string& value)
{
    m_protocolVersion = value;
}

bool CommsGenerator::commsGetMainNamespaceInOptionsForced() const
{
    return m_mainNamespaceInOptionsForced;
}

void CommsGenerator::commsSetMainNamespaceInOptionsForced(bool value)
{
    m_mainNamespaceInOptionsForced = value;
}

bool CommsGenerator::commsHasMainNamespaceInOptions() const
{
    return m_mainNamespaceInOptionsForced || (genSchemas().size() > 1U);
}

const std::vector<std::string>& CommsGenerator::commsGetExtraInputBundles() const
{
    return m_extraInputBundles;
}

void CommsGenerator::commsSetExtraInputBundles(const std::vector<std::string>& inputBundles)
{
    m_extraInputBundles = inputBundles;
}

const CommsGenerator::ExtraMessageBundlesList& CommsGenerator::commsExtraMessageBundles() const
{
    return m_commsExtraMessageBundles;
}

const std::string& CommsGenerator::commsMinCommsVersion()
{
    return MinCommsVersion;
}

bool CommsGenerator::genPrepareImpl()
{
    if (!Base::genPrepareImpl()) {
        return false;
    }

    return 
        commsPrepareExtraMessageBundlesInternal();
}

CommsGenerator::GenSchemaPtr CommsGenerator::genCreateSchemaImpl(commsdsl::parse::ParseSchema dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsSchema>(*this, dslObj, parent);
}

CommsGenerator::GenNamespacePtr CommsGenerator::genCreateNamespaceImpl(commsdsl::parse::ParseNamespace dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsNamespace>(*this, dslObj, parent);
}

CommsGenerator::GenInterfacePtr CommsGenerator::genCreateInterfaceImpl(commsdsl::parse::ParseInterface dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsInterface>(*this, dslObj, parent);
}

CommsGenerator::GenMessagePtr CommsGenerator::genCreateMessageImpl(commsdsl::parse::ParseMessage dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsMessage>(*this, dslObj, parent);
}

CommsGenerator::FramePtr CommsGenerator::genCreateFrameImpl(commsdsl::parse::ParseFrame dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsFrame>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateIntFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsIntField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateEnumFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsEnumField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateSetFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsSetField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateFloatFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsFloatField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateBitfieldFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsBitfieldField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateBundleFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsBundleField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateStringFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsStringField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateDataFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsDataField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateListFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsListField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateRefFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsRefField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateOptionalFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsOptionalField>(*this, dslObj, parent);
}

CommsGenerator::GenFieldPtr CommsGenerator::genCreateVariantFieldImpl(commsdsl::parse::ParseField dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsVariantField>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateCustomLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsCustomLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateSyncLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsSyncLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateSizeLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsSizeLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateIdLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsIdLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateValueLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsValueLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreatePayloadLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsPayloadLayer>(*this, dslObj, parent);
}

CommsGenerator::GenLayerPtr CommsGenerator::genCreateChecksumLayerImpl(commsdsl::parse::ParseLayer dslObj, commsdsl::gen::GenElem* parent)
{
    return std::make_unique<commsdsl2comms::CommsChecksumLayer>(*this, dslObj, parent);
}

bool CommsGenerator::genWriteImpl() 
{
    for (auto idx = 0U; idx < genSchemas().size(); ++idx) {
        genChooseCurrentSchema(idx);
        bool result = 
            CommsFieldBase::write(*this) &&
            CommsVersion::write(*this) &&
            CommsDefaultOptions::write(*this);

        if (!result) {
            return false;
        }
    }

    assert(&genCurrentSchema() == &genProtocolSchema());
    return 
        CommsCmake::write(*this) &&
        CommsDoxygen::write(*this) &&
        commsWriteExtraFilesInternal();
}

bool CommsGenerator::commsPrepareExtraMessageBundlesInternal()
{
    m_commsExtraMessageBundles.reserve(m_extraInputBundles.size());
    for (auto& b : m_extraInputBundles) {
        std::string name;
        std::string path = b;

        auto sepPos = b.find_first_of('@');
        if (sepPos != std::string::npos) {
            name.assign(b, 0, sepPos);
            path.erase(path.begin(), path.begin() + sepPos + 1);
        }

        if (name.empty()) {
            name = fs::path(path).stem().string();
            genLogger().genDebug("Bundle name from path: " + path + " --> " + name);
        }

        if (name.empty()) {
            genLogger().genError("Failed to idenity bundle name for " + b);
            return false;
        }

        std::ifstream stream(path);
        if (!stream) {
            genLogger().genError("Failed to read extra messages bundle file " + path);
            return false;
        }

        std::string contents(std::istreambuf_iterator<char>(stream), (std::istreambuf_iterator<char>()));
        auto lines = util::genStrSplitByAnyChar(contents, "\n\r");
        MessagesAccessList messages;
        messages.reserve(lines.size());

        for (auto& l : lines) {
            auto* m = genGindMessage(l);
            if (m == nullptr) {
                genLogger().genError("Failed to fined message \"" + l + "\" for bundle " + name);
                return false;
            }

            messages.push_back(m);
        }

        genLogger().genDebug("Extra message bundle: " + name);
        m_commsExtraMessageBundles.emplace_back(std::move(name), std::move(messages));
    };
    return true;
}

bool CommsGenerator::commsWriteExtraFilesInternal() const
{
    const std::vector<std::string> ReservedExt = {
        strings::genReplaceFileSuffixStr(),
        strings::genExtendFileSuffixStr(),
        strings::genPublicFileSuffixStr(),
        strings::genProtectedFileSuffixStr(),
        strings::genPrivateFileSuffixStr(),
        strings::genValueFileSuffixStr(),
        strings::genReadFileSuffixStr(),
        strings::genReadBodyFileSuffixStr(),
        strings::genWriteFileSuffixStr(),
        strings::genWriteBodyFileSuffixStr(),
        strings::genLengthFileSuffixStr(),
        strings::genLengthBodyFileSuffixStr(),
        strings::genValidFileSuffixStr(),
        strings::genValidBodyFileSuffixStr(),
        strings::genRefreshFileSuffixStr(),
        strings::genRefreshBodyFileSuffixStr(),
        strings::genNameFileSuffixStr(),
        strings::genNameBodyFileSuffixStr(),
        strings::genIncFileSuffixStr(),
        strings::genAppendFileSuffixStr(),
        strings::genConstructFileSuffixStr(),
    }; 

    return genCopyExtraSourceFiles(ReservedExt);
}

} // namespace commsdsl2comms

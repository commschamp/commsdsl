#include "cxxtest/TestSuite.h"

#include "test21/Message.h"
#include "test21/message/Msg1.h"
#include "test21/message/Msg2.h"
#include "test21/frame/Frame.h"
#include "test21/dispatch/DispatchMessage.h"
#include "test21/input/ServerInputMessages.h"
#include "comms/process.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();

    using Interface =
        test21::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST21_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
    using Frame = test21::frame::Frame<Interface>;
    using ServerFrame = test21::frame::Frame<Interface, test21::input::ServerInputMessages<Interface> >;

    class Handler
    {
    public:
        void handle(Msg2& msg)
        {
            static_cast<void>(msg);
            m_msg2Received = true;
        }

        void handle(Interface& msg)
        {
            static_cast<void>(msg);
            m_msg2Received = false;
        }

        bool getMsg2Received() const
        {
            return m_msg2Received;
        }

        void reset()
        {
            m_msg2Received = false;
        }

    private:
        bool m_msg2Received = false;
    };
};

void TestSuite::test1()
{
    Msg1 msg;
    TS_ASSERT(msg.field_f1().someFunc());
    TS_ASSERT(msg.field_f2().someFunc());
    TS_ASSERT(msg.field_f3().someFunc());
    TS_ASSERT(msg.field_f4().someFunc());
    TS_ASSERT(msg.field_f5().someFunc());
    TS_ASSERT(msg.field_f6().someFunc());
    TS_ASSERT(msg.field_f7().someFunc());
    TS_ASSERT(msg.field_f8().someFunc());
    TS_ASSERT(msg.field_f9().someFunc());
    TS_ASSERT(msg.field_f10().someFunc());
    TS_ASSERT(msg.field_f11().someFunc());
    TS_ASSERT(msg.someFunc());
}

void TestSuite::test2()
{
    std::vector<std::uint8_t> outBuf;
    Frame frame;
    Msg2 msg;
    msg.field_f1().value() = Msg2::Field_f1::ValueType::V3;
    
    outBuf.resize(frame.length(msg));
    auto* writeIter = &outBuf[0];
    auto es = frame.write(msg, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    Handler handler;
    auto comsumed = comms::processAllWithDispatch(&outBuf[0], outBuf.size(), frame, handler);
    TS_ASSERT_EQUALS(comsumed, outBuf.size());
    TS_ASSERT(handler.getMsg2Received()); // Make sure that Msg1 is received
}

void TestSuite::test3()
{
    std::vector<std::uint8_t> outBuf;
    ServerFrame frame;
    Msg2 msg;
    msg.field_f1().value() = Msg2::Field_f1::ValueType::V3;

    outBuf.resize(frame.length(msg));
    auto* writeIter = &outBuf[0];
    auto es = frame.write(msg, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    Handler handler;
    using Dispatcher = test21::dispatch::MsgDispatcherDefaultOptions;
    auto comsumed = comms::processAllWithDispatchViaDispatcher<Dispatcher>(&outBuf[0], outBuf.size(), frame, handler);
    TS_ASSERT_EQUALS(comsumed, outBuf.size());
    TS_ASSERT(handler.getMsg2Received()); // Make sure that Msg2 is received
}

void TestSuite::test4()
{
    Msg1 msg;
    msg.pubFunc(); // Testing public function presence
}
#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test3/Message.h"
#include "test3/ns1/message/Msg1.h"
#include "test3/ns1/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    using Interface =
        test3::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST3_NS1_ALIASES_FOR_ALL_MESSAGES(,,Interface, test3::options::DefaultOptions)
    
    using Frame = test3::ns1::frame::Frame<Interface>;

    void polymorphicNameCheck(const Interface& msg, const char* value)
    {
        TS_ASSERT_EQUALS(msg.name(), value);
    }

    void polymorphicLengthCheck(const Interface& msg, std::size_t len)
    {
        TS_ASSERT_EQUALS(msg.length(), len);
    }
};

void TestSuite::test1()
{
    Msg1 msg1;
    polymorphicNameCheck(msg1, "Msg1");
    polymorphicLengthCheck(msg1, 4U);
    TS_ASSERT_EQUALS(msg1.field_f1().name(), "f1");
}

void TestSuite::test2()
{
    Frame frame;
    Frame::MsgPtr msg;
    static const std::uint8_t Buf[] = {1, 0x1, 0x2, 0x3, 0x4};
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msg, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT_EQUALS(msg->getId(), 1U);
}

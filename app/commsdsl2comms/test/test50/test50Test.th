#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test50/Message.h"
#include "ext1/options/DefaultOptions.h"
#include "test50/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();

    using Interface = test50::Message<>;
    using Options = test50::options::DefaultOptionsT<ext1::options::DefaultOptions>;
    using Frame = test50::frame::Frame<Interface, test50::input::AllMessages<Interface, Options>, Options>;

    TEST50_ALIASES_FOR_ALL_MESSAGES(,,Interface, Options);
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x1, // MsgId.M1
        0xaa, // Msg1.F1,
        5, 'h', 'e', 'l', 'l', 'o', // Msg1.F2
        2, 0xde, 0xad, // Msg1.F3
        0x1a, // Msg1.F4,
        0xa, // Msg1.F5
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame frame;
    Frame::MsgPtr msgPtr;

    auto readIter = &Buf[0];
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(static_cast<bool>(msgPtr));
    auto* msg1 = static_cast<Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg1->field_f1().value(), 0xaa);
    TS_ASSERT_EQUALS(msg1->field_f2().value(), std::string("hello"));
    TS_ASSERT_EQUALS(msg1->field_f3().value().size(), 2);
    TS_ASSERT_EQUALS(msg1->field_f4().field_mem2().value(), Msg1::Field_f4::Field_mem2::ValueType::V1);
    TS_ASSERT(msg1->field_f5().doesExist());
    TS_ASSERT_EQUALS(msg1->field_f5().field().value(), 0xa);


    std::vector<std::uint8_t> outBuf(BufSize);
    auto writeIter = &outBuf[0];
    es = frame.write(*msg1, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(std::begin(Buf), std::end(Buf), outBuf.begin()));
}

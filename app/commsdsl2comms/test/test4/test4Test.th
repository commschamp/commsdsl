#include "cxxtest/TestSuite.h"

#include "test4/Message.h"
#include "test4/input/AllMessages.h"
#include "test4/field/Dummy.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    using Interface =
        test4::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST4_ALIASES_FOR_ALL_MESSAGES(,,Interface, test4::options::DefaultOptions)

    void polymorphicNameCheck(const Interface& msg, const char* value)
    {
        TS_ASSERT_EQUALS(msg.name(), value);
    }

    void polymorphicLengthCheck(const Interface& msg, std::size_t len)
    {
        TS_ASSERT_EQUALS(msg.length(), len);
    }
};

void TestSuite::test1()
{
    static_assert(test4::message::Msg1Fields<>::F3::isVersionDependent(), "Invalid assumption");
    static_assert(Msg1::areFieldsVersionDependent(), "Invalid Assumption");
    Msg1 msg1;
    polymorphicNameCheck(msg1, "Msg1");
    TS_ASSERT_EQUALS(msg1.field_year().name(), "year");
    TS_ASSERT(msg1.field_year().valid());
    TS_ASSERT(msg1.field_f2().isNull());
    TS_ASSERT(!msg1.field_f3().valid());
    TS_ASSERT_EQUALS(msg1.field_f3().getVersion(), 5U);

    msg1.field_year().value() = 2050;
    TS_ASSERT(!msg1.field_year().valid());

    TS_ASSERT_EQUALS(msg1.version(), 5U);
    TS_ASSERT(msg1.field_f4().doesExist());
    TS_ASSERT(msg1.field_f5().doesExist());

    msg1.version() = 3U;
    TS_ASSERT(msg1.refresh());
    TS_ASSERT(msg1.field_f4().doesExist());
    TS_ASSERT(msg1.field_f5().isMissing());

    static const std::uint8_t Buf[] = {
        18, // year
        0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, // f2
        0xab, // f3
        0xcd, 0xef, // f4
        0xa, 0xb, 0xc, 0xd // f5
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    msg1.version() = 5U;
    Msg1::ReadIterator iter = &Buf[0];
    auto es = msg1.read(iter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msg1.field_f4().doesExist());
    TS_ASSERT(msg1.field_f5().doesExist());
    TS_ASSERT_EQUALS(msg1.field_f4().field().value(), 0xcdef);
    TS_ASSERT_EQUALS(msg1.field_f5().field().value(), 0x0a0b0c0d);
}

void TestSuite::test2()
{
    test4::field::Dummy<> field;
    static_cast<void>(field); // Just testing generation of never referenced field.
}

#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test30/Message.h"
#include "test30/message/Msg1.h"
#include "test30/message/Msg2.h"
#include "test30/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test30::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST30_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
    using AllMessages = test30::input::AllMessages<Interface>;
    using Frame = test30::frame::Frame<Interface, AllMessages>;
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = 
    {
        1, 
        8,
        5, (std::uint8_t)'h', (std::uint8_t)'e', (std::uint8_t)'l', (std::uint8_t)'l', (std::uint8_t)'o',
        0x1, 0x2,
        0xab, 0xcd
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test30::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().field_str().value(), "hello");
    TS_ASSERT_EQUALS(msg->field_f1().field_length().value(), 8U);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    static const std::uint8_t ExpBuf[] = 
    {
        1, 
        6,
        5, (std::uint8_t)'h', (std::uint8_t)'e', (std::uint8_t)'l', (std::uint8_t)'l', (std::uint8_t)'o',
        0xab, 0xcd
    };
    static const std::size_t ExpBufSize = std::extent<decltype(ExpBuf)>::value;
    TS_ASSERT(msgPtr->refresh());
    TS_ASSERT_EQUALS(msg->field_f1().field_length().value(), 6U);
    TS_ASSERT_EQUALS(frame.length(*msgPtr), ExpBufSize);

    std::vector<std::uint8_t> outBuf;
    outBuf.resize(frame.length(*msgPtr));
    auto writeIter = &outBuf[0];
    es = frame.write(*msgPtr, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(std::begin(ExpBuf), std::end(ExpBuf), outBuf.begin()));
}

void TestSuite::test2()
{
    static const std::uint8_t Buf[] = 
    {
        2, 
        8,
        5, (std::uint8_t)'h', (std::uint8_t)'e', (std::uint8_t)'l', (std::uint8_t)'l', (std::uint8_t)'o',
        0x1, 0x2,
        0xab, 0xcd
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test30::MsgId_M2);
    auto* msg = static_cast<const Msg2*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().field_str().value(), "hello");
    TS_ASSERT_EQUALS(msg->field_f1().field_length().value(), 8U);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    static const std::uint8_t ExpBuf[] = 
    {
        2, 
        6,
        5, (std::uint8_t)'h', (std::uint8_t)'e', (std::uint8_t)'l', (std::uint8_t)'l', (std::uint8_t)'o',
        0xab, 0xcd
    };
    static const std::size_t ExpBufSize = std::extent<decltype(ExpBuf)>::value;
    TS_ASSERT(msgPtr->refresh());
    TS_ASSERT_EQUALS(msg->field_f1().field_length().value(), 6U);
    TS_ASSERT_EQUALS(frame.length(*msgPtr), ExpBufSize);

    std::vector<std::uint8_t> outBuf;
    outBuf.resize(frame.length(*msgPtr));
    auto writeIter = &outBuf[0];
    es = frame.write(*msgPtr, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(std::begin(ExpBuf), std::end(ExpBuf), outBuf.begin()));
}

void TestSuite::test3()
{
    Msg3 msg;
    TS_ASSERT(msg.valid());

    msg.field_f1().field_m1().setValue(1);
    TS_ASSERT(!msg.valid());
    msg.field_f1().field_m2().setValue(1);
    TS_ASSERT(msg.valid());
}


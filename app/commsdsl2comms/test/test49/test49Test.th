#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test49/Message.h"
#include "test49/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();

    using Interface = test49::Message<>;
    using Frame = test49::frame::Frame<Interface>;

    TEST49_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x1, // MsgId.M1
        0x5, // Msg1.F1.M1.Short
        'h', 'e', 'l', 'l', 'o' // Msg1.F1.M2
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame frame;
    Frame::MsgPtr msgPtr;

    auto readIter = &Buf[0];
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(static_cast<bool>(msgPtr));
    auto* msg1 = static_cast<Msg1*>(msgPtr.get());
    TS_ASSERT(msg1->field_f2().doesExist());
    TS_ASSERT_EQUALS(msg1->field_f2().field().value(), "hello");
    TS_ASSERT_EQUALS(frame.length(*msg1), BufSize);

    std::vector<std::uint8_t> outBuf(BufSize);
    auto writeIter = &outBuf[0];
    es = frame.write(*msg1, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(std::begin(Buf), std::end(Buf), outBuf.begin()));
}

#include "cxxtest/TestSuite.h"

#include "test14/Message.h"
#include "test14/input/AllMessages.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test14::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST14_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface)
};

void TestSuite::test1()
{
    Msg1 msg;
    TS_ASSERT_EQUALS(msg.field_f1().value(), "hello");
    msg.field_f4().value() = "bla";

    std::vector<std::uint8_t> buf;
    buf.resize(msg.length());
    auto writeIter = &buf[0];
    auto es = msg.write(writeIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    const auto* readIter = &buf[0];
    Msg1 msg2;
    es = msg2.read(readIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT_EQUALS(msg, msg2);
}

void TestSuite::test2()
{
    Msg2 msg;
    TS_ASSERT_EQUALS(msg.field_f1().value(), "bla1");
    TS_ASSERT(msg.field_f1().valid());

    msg.field_f1().setValue("bla2");
    TS_ASSERT(msg.field_f1().valid());

    msg.field_f1().setValue("bla6");
    TS_ASSERT(!msg.field_f1().valid());
}

void TestSuite::test3()
{
    // Testing failure to read invalid value of Msg2.f2

    Msg2 msg;
    msg.field_f2().setValue("bla6");
    TS_ASSERT(!msg.doValid());

    std::vector<std::uint8_t> outBuf;
    auto writeIter = std::back_inserter(outBuf);
    auto es = msg.doWrite(writeIter, outBuf.max_size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    auto readIter = outBuf.data();
    es = msg.doRead(readIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::InvalidMsgData);
}


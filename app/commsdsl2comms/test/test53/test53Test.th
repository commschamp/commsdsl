#include "cxxtest/TestSuite.h"

#include "test53/sub1/Interface.h"
#include "test53/sub1/frame/Frame.h"
#include "test53/sub2/Interface.h"
#include "test53/sub2/frame/Frame.h"

#include "comms/process.h"

#include <cstdint>
#include <type_traits>

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    struct Handler
    {
        template <typename TMsg>
        void handle(TMsg& msg)
        {
            static_cast<void>(msg);
        }
    };    

    using Sub1Interface = 
        test53::sub1::Interface<
            comms::option::app::IdInfoInterface,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::NameInterface,
            comms::option::app::Handler<Handler>
        >;

    using Sub2Interface = 
        test53::sub2::Interface<
            comms::option::app::IdInfoInterface,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::NameInterface,
            comms::option::app::Handler<Handler>
        >;        

    using Sub1Frame = test53::sub1::frame::Frame<Sub1Interface>;
    using Sub2Frame = test53::sub2::frame::Frame<Sub2Interface>;


    TEST53_SUB1_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(Sub1,,Sub1Interface);
    TEST53_SUB2_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(Sub2,,Sub2Interface);
};

void TestSuite::test1()
{
    Sub1Msg1 msg1;
    Sub2Msg1 msg2;
}

void TestSuite::test2()
{
    static const std::uint8_t Buf[] = {
        0x0, 0x3, /* size */
        0x1, /* id */
        0x01, 0x02, /* payload */
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Handler handler;
    Sub1Frame frame;
    Sub1Frame::MsgPtr msgPtr;
    auto iter = &Buf[0];
    auto es = comms::processSingleWithDispatch(iter, BufSize, frame, msgPtr, handler);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    auto* sub1Msg1 = dynamic_cast<Sub1Msg1*>(msgPtr.get());
    TS_ASSERT_DIFFERS(sub1Msg1, nullptr);
}

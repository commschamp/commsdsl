#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test32/Message.h"
#include "test32/message/Msg1.h"
#include "test32/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();

    using Interface =
        test32::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST32_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
    using Frame = test32::frame::Frame<Interface>;

    class TypeVerifier
    {
    public:
        TypeVerifier(std::uint8_t type) : m_type(type) {}

        template <std::size_t TIdx, typename TField>
        void operator()(TField& field)
        {
            TS_ASSERT(field.field_type().getValue() == m_type);
        }

    private:
        std::uint8_t m_type = 0U;
    };
};

void TestSuite::test1()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 0, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 0U);
    msg->field_f1().currentFieldExec(TypeVerifier(0));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p1().field_value().value(), 0x01020304);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test2()
{
    static const std::uint8_t Buf1[] =
    {
        1, 1, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 1U);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p2().field_value().value(), 0x01);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    auto* nonConstMsg = const_cast<Msg1*>(msg);
    nonConstMsg->field_f1().currentFieldExec(TypeVerifier(1));
}

void TestSuite::test3()
{
    static const std::uint8_t Buf1[] =
    {
        1, 5, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 4U);
    msg->field_f1().currentFieldExec(TypeVerifier(5));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_any().field_type().value(), 0x05);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_any().field_length().value(), 0x04);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test4()
{
    Msg1 msg1;
    auto& f = msg1.field_f1().initField_p1();
    TS_ASSERT(msg1.valid());

    using PropKeyType = Msg1::Field_f1::Field_p1::Field_type::ValueType;
    TS_ASSERT_EQUALS(f.field_type().getValue(), static_cast<PropKeyType>(0));
    TS_ASSERT(f.field_type().hasFixedValue());
    // f.field_type().value() = static_cast<PropKeyType>(1);
    // TS_ASSERT(msg1.doRefresh());
    // TS_ASSERT_EQUALS(f.field_type().getValue(), static_cast<PropKeyType>(0));
}

void TestSuite::test5()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 0, 0x1, 0xff, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 0U);
    msg->field_f1().currentFieldExec(TypeVerifier(0));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p1().field_value().value(), 0xff);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    // msg->field_f1().accessField_p1().field_value().setForcedLength(msg->field_f1().accessField_p1().field_length().value());
    std::vector<std::uint8_t> outBuf;
    outBuf.resize(frame.length(*msgPtr));
    TS_ASSERT_EQUALS(Buf1Size, outBuf.size());
    auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
    es = frame.write(*msgPtr, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf1)));
}

void TestSuite::test6()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 2, 0x2, 0xff, 0xff, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 2U);
    msg->field_f1().currentFieldExec(TypeVerifier(2));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p3().field_value().value(), Msg1::Field_f1::Field_p3::Field_value::ValueType::V2);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    // msg->field_f1().accessField_p3().field_value().setForcedLength(msg->field_f1().accessField_p3().field_length().value());
    std::vector<std::uint8_t> outBuf;
    outBuf.resize(frame.length(*msgPtr));
    TS_ASSERT_EQUALS(Buf1Size, outBuf.size());
    auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
    es = frame.write(*msgPtr, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf1)));
}

void TestSuite::test7()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 3, 0x1, 0x1, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 3U);
    msg->field_f1().currentFieldExec(TypeVerifier(3));
    TS_ASSERT(msg->field_f1().accessField_p4().field_value().getBitValue_B0());
    TS_ASSERT(!msg->field_f1().accessField_p4().field_value().getBitValue_B8());
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    // msg->field_f1().accessField_p3().field_value().setForcedLength(msg->field_f1().accessField_p3().field_length().value());
    std::vector<std::uint8_t> outBuf;
    outBuf.resize(frame.length(*msgPtr));
    TS_ASSERT_EQUALS(Buf1Size, outBuf.size());
    auto writeIter = comms::writeIteratorFor<Interface>(&outBuf[0]);
    es = frame.write(*msgPtr, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf1)));
}

void TestSuite::test8()
{
    static const std::uint8_t Buf1[] = 
    {
        3, 0, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M3);
    auto* msg = static_cast<const Msg3*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 0U);
    msg->field_f1().currentFieldExec(TypeVerifier(0));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p1().field_value().value(), 0x01020304);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test9()
{
    std::vector<std::uint8_t> buf = 
    {
        3, 5, 0xff, 0x1, 0xff
    };

    std::fill_n(std::back_inserter(buf), 0x1ff, std::uint8_t(0x1));
    buf.insert(buf.end(), {0xab, 0xcd});

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&buf[0]);
    auto es = frame.read(msgPtr, readIter, buf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M3);
    auto* msg = static_cast<const Msg3*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 4U);
    msg->field_f1().currentFieldExec(TypeVerifier(5));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_any().field_value().value().size(), 0x1ff);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}
#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseIntField.h"

class IntTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();    
    void test28();    
    void test29();
    void test30();   
    void test31();
    void test32();
    void test33();
    void test34();
    void test35();
    void test36();
    void test37();
    void test38();
    void test39();
    void test40();
    void test41();
    void test42();
    void test43();
};

void IntTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void IntTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void IntTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT(!field.parseIsPseudo());

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint8);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(intField.parseBitLength(), 0U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), 0);
    TS_ASSERT_EQUALS(intField.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint8_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 0);
    TS_ASSERT_EQUALS(intField.parseValidCheckVersion(), false);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT(validRanges.empty());
    TS_ASSERT(specialValues.empty());
    TS_ASSERT(intField.parseSignExt());
}

void IntTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "my_ns");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field1 = fields[0];
    auto& field2 = fields[1];
    auto& field3 = fields[2];

    TS_ASSERT_EQUALS(field1.parseName(), "Int1");
    TS_ASSERT_EQUALS(field2.parseName(), "Int2");
    TS_ASSERT_EQUALS(field3.parseName(), "Int3");
    TS_ASSERT_EQUALS(field1.parseDisplayName(), "Int 1");
    TS_ASSERT_EQUALS(field2.parseDisplayName(), "Int 2");
    TS_ASSERT_EQUALS(field3.parseDisplayName(), "Int 3");
    TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(field1.parseKind(), field2.parseKind());
    TS_ASSERT_EQUALS(field1.parseKind(), field3.parseKind());
    TS_ASSERT(field1.parseIsPseudo());
    TS_ASSERT_EQUALS(field1.parseIsPseudo(), field2.parseIsPseudo());
    TS_ASSERT_EQUALS(field1.parseIsPseudo(), field3.parseIsPseudo());

    commsdsl::parse::ParseIntField intField1(field1);
    commsdsl::parse::ParseIntField intField2(field2);
    commsdsl::parse::ParseIntField intField3(field3);
    auto scaling1 = intField1.parseScaling();
    auto scaling2 = intField2.parseScaling();
    auto scaling3 = intField3.parseScaling();
    auto& validRanges1 = intField1.parseValidRanges();
    auto& validRanges2 = intField2.parseValidRanges();
    auto& validRanges3 = intField3.parseValidRanges();
    auto& specialValues1 = intField1.parseSpecialValues();
    auto& specialValues2 = intField2.parseSpecialValues();
    auto& specialValues3 = intField3.parseSpecialValues();

    TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
    TS_ASSERT_EQUALS(intField1.parseType(), intField2.parseType());
    TS_ASSERT_EQUALS(intField1.parseType(), intField3.parseType());
    TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField2.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField3.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField2.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField3.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField2.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField3.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int16_t>::min());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField2.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField3.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int16_t>::max());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField2.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField3.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 500);
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField2.parseDefaultValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField3.parseDefaultValue());
    TS_ASSERT_EQUALS(scaling1.first, 1);
    TS_ASSERT_EQUALS(scaling1.second, 10);
    TS_ASSERT_EQUALS(scaling1, scaling2);
    TS_ASSERT_EQUALS(scaling1, scaling3);
    TS_ASSERT_EQUALS(validRanges1.size(), 1U);
    TS_ASSERT_EQUALS(validRanges1.front().m_min, 400);
    TS_ASSERT_EQUALS(validRanges1.front().m_max, intField1.parseMaxValue());
    TS_ASSERT_EQUALS(validRanges1, validRanges2);
    TS_ASSERT_EQUALS(validRanges1, validRanges3);
    TS_ASSERT(specialValues1.empty());
    TS_ASSERT(specialValues2.empty());
    TS_ASSERT(specialValues3.empty());
}

void IntTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 3U);

    auto& ns1 = namespaces[0];
    auto& ns2 = namespaces[1];
    auto& ns3 = namespaces[2];

    TS_ASSERT_EQUALS(ns1.parseName(), "my_ns1");
    TS_ASSERT_EQUALS(ns2.parseName(), "my_ns2");
    TS_ASSERT_EQUALS(ns3.parseName(), "my_ns3");

    auto fields1 = ns1.parseFields();
    auto fields2 = ns2.parseFields();
    auto fields3 = ns3.parseFields();

    TS_ASSERT_EQUALS(fields1.size(), 1U);
    TS_ASSERT_EQUALS(fields2.size(), 1U);
    TS_ASSERT_EQUALS(fields3.size(), 1U);

    auto& field1 = fields1.front();
    auto& field2 = fields2.front();
    auto& field3 = fields3.front();

    TS_ASSERT_EQUALS(field1.parseName(), "Year");
    TS_ASSERT_EQUALS(field1.parseName(), field2.parseName());
    TS_ASSERT_EQUALS(field1.parseName(), field3.parseName());
    TS_ASSERT(field1.parseDisplayName().empty());
    TS_ASSERT(field2.parseDisplayName().empty());
    TS_ASSERT(field3.parseDisplayName().empty());
    TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(field1.parseKind(), field2.parseKind());
    TS_ASSERT_EQUALS(field1.parseKind(), field3.parseKind());

    commsdsl::parse::ParseIntField intField1(field1);
    commsdsl::parse::ParseIntField intField2(field2);
    commsdsl::parse::ParseIntField intField3(field3);
    auto scaling1 = intField1.parseScaling();
    auto scaling2 = intField2.parseScaling();
    auto scaling3 = intField3.parseScaling();
    auto& validRanges1 = intField1.parseValidRanges();
    auto& validRanges2 = intField2.parseValidRanges();
    auto& validRanges3 = intField3.parseValidRanges();
    auto& specialValues1 = intField1.parseSpecialValues();
    auto& specialValues2 = intField2.parseSpecialValues();
    auto& specialValues3 = intField3.parseSpecialValues();

    TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
    TS_ASSERT_EQUALS(intField1.parseType(), intField2.parseType());
    TS_ASSERT_EQUALS(intField1.parseType(), intField3.parseType());
    TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField2.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField3.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField2.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField3.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), -2000);
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField2.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField3.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int8_t>::min() + 2000);
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField2.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField3.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int8_t>::max() + 2000);
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField2.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField3.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 2000);
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField2.parseDefaultValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField3.parseDefaultValue());
    TS_ASSERT_EQUALS(intField1.parseUnits(), commsdsl::parse::ParseUnits::Unknown);
    TS_ASSERT_EQUALS(intField1.parseUnits(), intField2.parseUnits());
    TS_ASSERT_EQUALS(intField1.parseUnits(), intField3.parseUnits());
    TS_ASSERT_EQUALS(scaling1.first, 1);
    TS_ASSERT_EQUALS(scaling1.second, 1);
    TS_ASSERT_EQUALS(scaling1, scaling2);
    TS_ASSERT_EQUALS(scaling1, scaling3);
    TS_ASSERT_EQUALS(validRanges1.size(), 1U);
    TS_ASSERT_EQUALS(validRanges1.front().m_min, 2000);
    TS_ASSERT_EQUALS(validRanges1.front().m_max, 2100);
    TS_ASSERT_EQUALS(validRanges1, validRanges2);
    TS_ASSERT_EQUALS(validRanges1, validRanges3);
    TS_ASSERT(specialValues1.empty());
    TS_ASSERT(specialValues2.empty());
    TS_ASSERT(specialValues3.empty());
}

void IntTestSuite::test4()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field1 = fields[0];
    auto& field2 = fields[1];
    auto& field3 = fields[2];

    TS_ASSERT_EQUALS(field1.parseName(), "Int1");
    TS_ASSERT_EQUALS(field2.parseName(), "Int2");
    TS_ASSERT_EQUALS(field3.parseName(), "Int3");
    TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(field1.parseKind(), field2.parseKind());
    TS_ASSERT_EQUALS(field1.parseKind(), field3.parseKind());

    commsdsl::parse::ParseIntField intField1(field1);
    commsdsl::parse::ParseIntField intField2(field2);
    commsdsl::parse::ParseIntField intField3(field3);
    auto scaling1 = intField1.parseScaling();
    auto scaling2 = intField2.parseScaling();
    auto scaling3 = intField3.parseScaling();
    auto& validRanges1 = intField1.parseValidRanges();
    auto& validRanges2 = intField2.parseValidRanges();
    auto& validRanges3 = intField3.parseValidRanges();
    auto& specialValues1 = intField1.parseSpecialValues();
    auto& specialValues2 = intField2.parseSpecialValues();
    auto& specialValues3 = intField3.parseSpecialValues();

    TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int8);
    TS_ASSERT_EQUALS(intField1.parseType(), intField2.parseType());
    TS_ASSERT_EQUALS(intField1.parseType(), intField3.parseType());
    TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField2.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseEndian(), intField3.parseEndian());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField2.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseMinLength(), intField3.parseMinLength());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField2.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseSerOffset(), intField3.parseSerOffset());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int8_t>::min());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField2.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMinValue(), intField3.parseMinValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int8_t>::max());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField2.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseMaxValue(), intField3.parseMaxValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 10);
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField2.parseDefaultValue());
    TS_ASSERT_EQUALS(intField1.parseDefaultValue(), intField3.parseDefaultValue());
    TS_ASSERT_EQUALS(scaling1.first, 1);
    TS_ASSERT_EQUALS(scaling1.second, 1);
    TS_ASSERT_EQUALS(scaling1, scaling2);
    TS_ASSERT_EQUALS(scaling1, scaling3);
    TS_ASSERT_EQUALS(validRanges1.size(), 3U);
    auto& range1 = validRanges1[0];
    auto& range2 = validRanges1[1];
    auto& range3 = validRanges1[2];
    TS_ASSERT_EQUALS(range1.m_min, 10);
    TS_ASSERT_EQUALS(range1.m_max, 10);
    TS_ASSERT_EQUALS(range1.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(range1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT_EQUALS(range2.m_min, 100);
    TS_ASSERT_EQUALS(range2.m_max, 120);
    TS_ASSERT_EQUALS(range3.m_min, 130);
    TS_ASSERT_EQUALS(range3.m_max, 140);
    TS_ASSERT_EQUALS(validRanges1, validRanges2);
    TS_ASSERT_EQUALS(validRanges1, validRanges3);
    TS_ASSERT_EQUALS(specialValues1.size(), 2U);
    auto& special1 = *specialValues1.begin();
    auto& special2 = *(++specialValues1.begin());
    TS_ASSERT_EQUALS(special1.first, "val1");
    TS_ASSERT_EQUALS(special1.second.m_value, 100);
    TS_ASSERT_EQUALS(special2.first, "val2");
    TS_ASSERT_EQUALS(special2.second.m_value, 101);
    TS_ASSERT_EQUALS(specialValues1, specialValues2);
    TS_ASSERT_EQUALS(specialValues1, specialValues3);
}

void IntTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 8U);

    do {
        auto& field1 = fields[0];
        TS_ASSERT_EQUALS(field1.parseName(), "Int1");
        TS_ASSERT(field1.parseDisplayName().empty());
        TS_ASSERT(field1.parseDescription().empty());
        TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField1(field1);
        auto scaling1 = intField1.parseScaling();
        auto& validRanges1 = intField1.parseValidRanges();
        auto& specialValues1 = intField1.parseSpecialValues();
        TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int8);
        TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField1.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int8_t>::min());
        TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int8_t>::max());
        TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling1.first, 1);
        TS_ASSERT_EQUALS(scaling1.second, 1);
        TS_ASSERT_EQUALS(validRanges1.size(), 1U);
        TS_ASSERT_EQUALS(validRanges1.front().m_min, std::numeric_limits<std::int8_t>::min());
        TS_ASSERT_EQUALS(validRanges1.front().m_max, 10);
        TS_ASSERT(specialValues1.empty());
    } while (false);

    do {
        auto& field2 = fields[1];
        TS_ASSERT_EQUALS(field2.parseName(), "Int2");
        TS_ASSERT(field2.parseDisplayName().empty());
        TS_ASSERT(field2.parseDescription().empty());
        TS_ASSERT_EQUALS(field2.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField2(field2);
        auto scaling2 = intField2.parseScaling();
        auto& validRanges2 = intField2.parseValidRanges();
        auto& specialValues2 = intField2.parseSpecialValues();
        TS_ASSERT_EQUALS(intField2.parseType(), commsdsl::parse::ParseIntField::Type::Uint8);
        TS_ASSERT_EQUALS(intField2.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField2.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField2.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField2.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField2.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint8_t>::max());
        TS_ASSERT_EQUALS(intField2.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling2.first, 1);
        TS_ASSERT_EQUALS(scaling2.second, 1);
        TS_ASSERT_EQUALS(validRanges2.size(), 1U);
        TS_ASSERT_EQUALS(validRanges2.front().m_min, 10);
        TS_ASSERT_EQUALS(validRanges2.front().m_max, std::numeric_limits<std::uint8_t>::max());
        TS_ASSERT(specialValues2.empty());
    } while (false);

    do {
        auto& field3 = fields[2];
        TS_ASSERT_EQUALS(field3.parseName(), "Int3");
        TS_ASSERT(field3.parseDisplayName().empty());
        TS_ASSERT(field3.parseDescription().empty());
        TS_ASSERT_EQUALS(field3.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField3(field3);
        auto scaling3 = intField3.parseScaling();
        auto& validRanges3 = intField3.parseValidRanges();
        auto& specialValues3 = intField3.parseSpecialValues();
        TS_ASSERT_EQUALS(intField3.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
        TS_ASSERT_EQUALS(intField3.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField3.parseMinLength(), 2U);
        TS_ASSERT_EQUALS(intField3.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField3.parseMinValue(), std::numeric_limits<std::int16_t>::min());
        TS_ASSERT_EQUALS(intField3.parseMaxValue(), std::numeric_limits<std::int16_t>::max());
        TS_ASSERT_EQUALS(intField3.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling3.first, 1);
        TS_ASSERT_EQUALS(scaling3.second, 1);
        TS_ASSERT_EQUALS(validRanges3.size(), 1U);
        TS_ASSERT_EQUALS(validRanges3.front().m_min, std::numeric_limits<std::int16_t>::min());
        TS_ASSERT_EQUALS(validRanges3.front().m_max, 1000);
        TS_ASSERT(specialValues3.empty());
    } while (false);

    do {
        auto& field4 = fields[3];
        TS_ASSERT_EQUALS(field4.parseName(), "Int4");
        TS_ASSERT(field4.parseDisplayName().empty());
        TS_ASSERT(field4.parseDescription().empty());
        TS_ASSERT_EQUALS(field4.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField4(field4);
        auto scaling4 = intField4.parseScaling();
        auto& validRanges4 = intField4.parseValidRanges();
        auto& specialValues4 = intField4.parseSpecialValues();
        TS_ASSERT_EQUALS(intField4.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
        TS_ASSERT_EQUALS(intField4.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField4.parseMinLength(), 2U);
        TS_ASSERT_EQUALS(intField4.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField4.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField4.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint16_t>::max());
        TS_ASSERT_EQUALS(intField4.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling4.first, 1);
        TS_ASSERT_EQUALS(scaling4.second, 1);
        TS_ASSERT_EQUALS(validRanges4.size(), 1U);
        TS_ASSERT_EQUALS(validRanges4.front().m_min, 1000);
        TS_ASSERT_EQUALS(validRanges4.front().m_max, std::numeric_limits<std::uint16_t>::max());
        TS_ASSERT(specialValues4.empty());
    } while (false);

    do {
        auto& field5 = fields[4];
        TS_ASSERT_EQUALS(field5.parseName(), "Int5");
        TS_ASSERT(field5.parseDisplayName().empty());
        TS_ASSERT(field5.parseDescription().empty());
        TS_ASSERT_EQUALS(field5.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField5(field5);
        auto scaling5 = intField5.parseScaling();
        auto& validRanges5 = intField5.parseValidRanges();
        auto& specialValues5 = intField5.parseSpecialValues();
        TS_ASSERT_EQUALS(intField5.parseType(), commsdsl::parse::ParseIntField::Type::Int32);
        TS_ASSERT_EQUALS(intField5.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField5.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(intField5.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField5.parseMinValue(), std::numeric_limits<std::int32_t>::min());
        TS_ASSERT_EQUALS(intField5.parseMaxValue(), std::numeric_limits<std::int32_t>::max());
        TS_ASSERT_EQUALS(intField5.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling5.first, 1);
        TS_ASSERT_EQUALS(scaling5.second, 1);
        TS_ASSERT_EQUALS(validRanges5.size(), 1U);
        TS_ASSERT_EQUALS(validRanges5.front().m_min, std::numeric_limits<std::int32_t>::min());
        TS_ASSERT_EQUALS(validRanges5.front().m_max, 100000);
        TS_ASSERT(specialValues5.empty());
    } while (false);

    do {
        auto& field6 = fields[5];
        TS_ASSERT_EQUALS(field6.parseName(), "Int6");
        TS_ASSERT(field6.parseDisplayName().empty());
        TS_ASSERT(field6.parseDescription().empty());
        TS_ASSERT_EQUALS(field6.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField6(field6);
        auto scaling6 = intField6.parseScaling();
        auto& validRanges6 = intField6.parseValidRanges();
        auto& specialValues6 = intField6.parseSpecialValues();
        TS_ASSERT_EQUALS(intField6.parseType(), commsdsl::parse::ParseIntField::Type::Uint32);
        TS_ASSERT_EQUALS(intField6.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField6.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(intField6.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField6.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField6.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint32_t>::max());
        TS_ASSERT_EQUALS(intField6.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling6.first, 1);
        TS_ASSERT_EQUALS(scaling6.second, 1);
        TS_ASSERT_EQUALS(validRanges6.size(), 1U);
        TS_ASSERT_EQUALS(validRanges6.front().m_min, 100000);
        TS_ASSERT_EQUALS(validRanges6.front().m_max, std::numeric_limits<std::uint32_t>::max());
        TS_ASSERT(specialValues6.empty());
    } while (false);

    do {
        auto& field7 = fields[6];
        TS_ASSERT_EQUALS(field7.parseName(), "Int7");
        TS_ASSERT(field7.parseDisplayName().empty());
        TS_ASSERT(field7.parseDescription().empty());
        TS_ASSERT_EQUALS(field7.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField7(field7);
        auto scaling7 = intField7.parseScaling();
        auto& validRanges7 = intField7.parseValidRanges();
        auto& specialValues7 = intField7.parseSpecialValues();
        TS_ASSERT_EQUALS(intField7.parseType(), commsdsl::parse::ParseIntField::Type::Int64);
        TS_ASSERT_EQUALS(intField7.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField7.parseMinLength(), 8U);
        TS_ASSERT_EQUALS(intField7.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField7.parseMinValue(), std::numeric_limits<std::int64_t>::min());
        TS_ASSERT_EQUALS(intField7.parseMaxValue(), std::numeric_limits<std::int64_t>::max());
        TS_ASSERT_EQUALS(intField7.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling7.first, 1);
        TS_ASSERT_EQUALS(scaling7.second, 1);
        TS_ASSERT_EQUALS(validRanges7.size(), 1U);
        TS_ASSERT_EQUALS(validRanges7.front().m_min, std::numeric_limits<std::int64_t>::min());
        TS_ASSERT_EQUALS(validRanges7.front().m_max, 0xffffffffff);
        TS_ASSERT(specialValues7.empty());
    } while (false);

    do {
        auto& field8 = fields[7];
        TS_ASSERT_EQUALS(field8.parseName(), "Int8");
        TS_ASSERT(field8.parseDisplayName().empty());
        TS_ASSERT(field8.parseDescription().empty());
        TS_ASSERT_EQUALS(field8.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField8(field8);
        auto scaling8 = intField8.parseScaling();
        auto& validRanges8 = intField8.parseValidRanges();
        auto& specialValues8 = intField8.parseSpecialValues();
        TS_ASSERT_EQUALS(intField8.parseType(), commsdsl::parse::ParseIntField::Type::Uint64);
        TS_ASSERT_EQUALS(intField8.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField8.parseMinLength(), 8U);
        TS_ASSERT_EQUALS(intField8.parseSerOffset(), 0);
        TS_ASSERT_EQUALS(intField8.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField8.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
        TS_ASSERT_EQUALS(intField8.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling8.first, 1);
        TS_ASSERT_EQUALS(scaling8.second, 1);
        TS_ASSERT_EQUALS(validRanges8.size(), 1U);
        TS_ASSERT_EQUALS(validRanges8.front().m_min, 0xffffffffff);
        TS_ASSERT_EQUALS(validRanges8.front().m_max, (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
        TS_ASSERT(specialValues8.empty());
    } while (false);
}

void IntTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint64);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 8U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), 0);
    TS_ASSERT_EQUALS(intField.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT(validRanges.empty());
    TS_ASSERT_EQUALS(specialValues.size(), 1U);
    auto iter = specialValues.find("Null");
    TS_ASSERT_DIFFERS(iter, specialValues.end());
    TS_ASSERT_EQUALS(iter->second.m_value, (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
}

void IntTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 6U);

    do {
        auto& field1 = fields[0];
        TS_ASSERT_EQUALS(field1.parseName(), "Int1");
        TS_ASSERT(field1.parseDisplayName().empty());
        TS_ASSERT(field1.parseDescription().empty());
        TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField1(field1);
        auto scaling1 = intField1.parseScaling();
        auto& validRanges1 = intField1.parseValidRanges();
        auto& specialValues1 = intField1.parseSpecialValues();
        TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
        TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField1.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int8_t>::min() - intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int8_t>::max() - intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling1.first, 1);
        TS_ASSERT_EQUALS(scaling1.second, 1);
        TS_ASSERT(validRanges1.empty());
        TS_ASSERT(specialValues1.empty());
    } while (false);

    do {
        auto& field2 = fields[1];
        TS_ASSERT_EQUALS(field2.parseName(), "Int2");
        TS_ASSERT(field2.parseDisplayName().empty());
        TS_ASSERT(field2.parseDescription().empty());
        TS_ASSERT_EQUALS(field2.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField2(field2);
        auto scaling2 = intField2.parseScaling();
        auto& validRanges2 = intField2.parseValidRanges();
        auto& specialValues2 = intField2.parseSpecialValues();
        TS_ASSERT_EQUALS(intField2.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
        TS_ASSERT_EQUALS(intField2.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField2.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField2.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField2.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField2.parseMaxValue(), std::numeric_limits<std::uint8_t>::max() - intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling2.first, 1);
        TS_ASSERT_EQUALS(scaling2.second, 1);
        TS_ASSERT(validRanges2.empty());
        TS_ASSERT(specialValues2.empty());
    } while (false);

    do {
        auto& field3 = fields[2];
        TS_ASSERT_EQUALS(field3.parseName(), "Int3");
        TS_ASSERT(field3.parseDisplayName().empty());
        TS_ASSERT(field3.parseDescription().empty());
        TS_ASSERT_EQUALS(field3.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField3(field3);
        auto scaling3 = intField3.parseScaling();
        auto& validRanges3 = intField3.parseValidRanges();
        auto& specialValues3 = intField3.parseSpecialValues();
        TS_ASSERT_EQUALS(intField3.parseType(), commsdsl::parse::ParseIntField::Type::Int32);
        TS_ASSERT_EQUALS(intField3.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField3.parseMinLength(), 3U);
        TS_ASSERT_EQUALS(intField3.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField3.parseMinValue(), -8388608LL - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseMaxValue(), 0x7fffff - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling3.first, 1);
        TS_ASSERT_EQUALS(scaling3.second, 1);
        TS_ASSERT(validRanges3.empty());
        TS_ASSERT(specialValues3.empty());
    } while (false);

    do {
        auto& field4 = fields[3];
        TS_ASSERT_EQUALS(field4.parseName(), "Int4");
        TS_ASSERT(field4.parseDisplayName().empty());
        TS_ASSERT(field4.parseDescription().empty());
        TS_ASSERT_EQUALS(field4.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField4(field4);
        auto scaling4 = intField4.parseScaling();
        auto& validRanges4 = intField4.parseValidRanges();
        auto& specialValues4 = intField4.parseSpecialValues();
        TS_ASSERT_EQUALS(intField4.parseType(), commsdsl::parse::ParseIntField::Type::Uint32);
        TS_ASSERT_EQUALS(intField4.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField4.parseMinLength(), 3U);
        TS_ASSERT_EQUALS(intField4.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField4.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField4.parseMaxValue(), 0xffffff - intField4.parseSerOffset());
        TS_ASSERT_EQUALS(intField4.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling4.first, 1);
        TS_ASSERT_EQUALS(scaling4.second, 1);
        TS_ASSERT(validRanges4.empty());
        TS_ASSERT(specialValues4.empty());
    } while (false);

    do {
        auto& field5 = fields[4];
        TS_ASSERT_EQUALS(field5.parseName(), "Int5");
        TS_ASSERT(field5.parseDisplayName().empty());
        TS_ASSERT(field5.parseDescription().empty());
        TS_ASSERT_EQUALS(field5.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField5(field5);
        auto scaling5 = intField5.parseScaling();
        auto& validRanges5 = intField5.parseValidRanges();
        auto& specialValues5 = intField5.parseSpecialValues();
        TS_ASSERT_EQUALS(intField5.parseType(), commsdsl::parse::ParseIntField::Type::Int64);
        TS_ASSERT_EQUALS(intField5.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField5.parseMinLength(), 5U);
        TS_ASSERT_EQUALS(intField5.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField5.parseMinValue(), -549755813888LL - intField5.parseSerOffset());
        TS_ASSERT_EQUALS(intField5.parseMaxValue(), 0x7fffffffff - intField5.parseSerOffset());
        TS_ASSERT_EQUALS(intField5.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling5.first, 1);
        TS_ASSERT_EQUALS(scaling5.second, 1);
        TS_ASSERT(validRanges5.empty());
        TS_ASSERT(specialValues5.empty());
    } while (false);

    do {
        auto& field6 = fields[5];
        TS_ASSERT_EQUALS(field6.parseName(), "Int6");
        TS_ASSERT(field6.parseDisplayName().empty());
        TS_ASSERT(field6.parseDescription().empty());
        TS_ASSERT_EQUALS(field6.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intField6(field6);
        auto scaling6 = intField6.parseScaling();
        auto& validRanges6 = intField6.parseValidRanges();
        auto& specialValues6 = intField6.parseSpecialValues();
        TS_ASSERT_EQUALS(intField6.parseType(), commsdsl::parse::ParseIntField::Type::Uint64);
        TS_ASSERT_EQUALS(intField6.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField6.parseMinLength(), 5U);
        TS_ASSERT_EQUALS(intField6.parseSerOffset(), 100);
        TS_ASSERT_EQUALS(intField6.parseMinValue(), 0);
        TS_ASSERT_EQUALS(intField6.parseMaxValue(), 0xffffffffff - intField6.parseSerOffset());
        TS_ASSERT_EQUALS(intField6.parseDefaultValue(), 0);
        TS_ASSERT_EQUALS(scaling6.first, 1);
        TS_ASSERT_EQUALS(scaling6.second, 1);
        TS_ASSERT(validRanges6.empty());
        TS_ASSERT(specialValues6.empty());
    } while (false);
}

void IntTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 6U);

    do {
        auto& field1 = fields[0];
        TS_ASSERT_EQUALS(field1.parseName(), "Int1");
        TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField1(field1);
        TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
        TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField1.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int8_t>::min() - intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int8_t>::max() - intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field2 = fields[1];
        TS_ASSERT_EQUALS(field2.parseName(), "Int2");
        TS_ASSERT(field2.parseDisplayName().empty());
        TS_ASSERT(field2.parseDescription().empty());
        TS_ASSERT_EQUALS(field2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField2(field2);
        TS_ASSERT_EQUALS(intField2.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
        TS_ASSERT_EQUALS(intField2.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField2.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField2.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField2.parseMinValue(), -intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseMaxValue(), std::numeric_limits<std::uint8_t>::max() - intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field3 = fields[2];
        TS_ASSERT_EQUALS(field3.parseName(), "Int3");
        TS_ASSERT(field3.parseDisplayName().empty());
        TS_ASSERT(field3.parseDescription().empty());
        TS_ASSERT_EQUALS(field3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField3(field3);
        TS_ASSERT_EQUALS(intField3.parseType(), commsdsl::parse::ParseIntField::Type::Int32);
        TS_ASSERT_EQUALS(intField3.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField3.parseMinLength(), 3U);
        TS_ASSERT_EQUALS(intField3.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField3.parseMinValue(), -8388608LL - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseMaxValue(), 0x7fffff - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field4 = fields[3];
        TS_ASSERT_EQUALS(field4.parseName(), "Int4");
        TS_ASSERT_EQUALS(field4.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField4(field4);
        TS_ASSERT_EQUALS(intField4.parseType(), commsdsl::parse::ParseIntField::Type::Uint32);
        TS_ASSERT_EQUALS(intField4.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField4.parseMinLength(), 3U);
        TS_ASSERT_EQUALS(intField4.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField4.parseMinValue(), -intField4.parseSerOffset());
        TS_ASSERT_EQUALS(intField4.parseMaxValue(), 0xffffff - intField4.parseSerOffset());
        TS_ASSERT_EQUALS(intField4.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field5 = fields[4];
        TS_ASSERT_EQUALS(field5.parseName(), "Int5");
        TS_ASSERT_EQUALS(field5.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField5(field5);
        TS_ASSERT_EQUALS(intField5.parseType(), commsdsl::parse::ParseIntField::Type::Int64);
        TS_ASSERT_EQUALS(intField5.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField5.parseMinLength(), 5U);
        TS_ASSERT_EQUALS(intField5.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField5.parseMinValue(), -549755813888LL - intField5.parseSerOffset());
        TS_ASSERT_EQUALS(intField5.parseMaxValue(), 0x7fffffffff - intField5.parseSerOffset());
        TS_ASSERT_EQUALS(intField5.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field6 = fields[5];
        TS_ASSERT_EQUALS(field6.parseName(), "Int6");
        TS_ASSERT_EQUALS(field6.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField6(field6);
        TS_ASSERT_EQUALS(intField6.parseType(), commsdsl::parse::ParseIntField::Type::Uint64);
        TS_ASSERT_EQUALS(intField6.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField6.parseMinLength(), 5U);
        TS_ASSERT_EQUALS(intField6.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField6.parseMinValue(), -intField6.parseSerOffset());
        TS_ASSERT_EQUALS(intField6.parseMaxValue(), 0xffffffffff - intField6.parseSerOffset());
        TS_ASSERT_EQUALS(intField6.parseDefaultValue(), 100);
    } while (false);
}

void IntTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    do {
        auto& field1 = fields[0];
        TS_ASSERT_EQUALS(field1.parseName(), "Int1");
        TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField1(field1);
        TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Intvar);
        TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField1.parseMaxLength(), 10U);
        TS_ASSERT_EQUALS(intField1.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField1.parseMinValue(), std::numeric_limits<std::int64_t>::min() - intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseMaxValue(), std::numeric_limits<std::int64_t>::max());
        TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field2 = fields[1];
        TS_ASSERT_EQUALS(field2.parseName(), "Int2");
        TS_ASSERT_EQUALS(field2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField2(field2);
        TS_ASSERT_EQUALS(intField2.parseType(), commsdsl::parse::ParseIntField::Type::Intvar);
        TS_ASSERT_EQUALS(intField2.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField2.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField2.parseMaxLength(), 8U);
        TS_ASSERT_EQUALS(intField2.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField2.parseMinValue(), static_cast<std::intmax_t>(0xff80000000000000ULL) - intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseMaxValue(), 0x7fffffffffffffLL - intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field3 = fields[2];
        TS_ASSERT_EQUALS(field3.parseName(), "Int3");
        TS_ASSERT(field3.parseDisplayName().empty());
        TS_ASSERT(field3.parseDescription().empty());
        TS_ASSERT_EQUALS(field3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField3(field3);
        TS_ASSERT_EQUALS(intField3.parseType(), commsdsl::parse::ParseIntField::Type::Intvar);
        TS_ASSERT_EQUALS(intField3.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(intField3.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField3.parseMaxLength(), 3U);
        TS_ASSERT_EQUALS(intField3.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField3.parseMinValue(), -1048576LL - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseMaxValue(), 0xfffff - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseDefaultValue(), 100);
    } while (false);
}


void IntTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    do {
        auto& field1 = fields[0];
        TS_ASSERT_EQUALS(field1.parseName(), "Int1");
        TS_ASSERT_EQUALS(field1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField1(field1);
        TS_ASSERT_EQUALS(intField1.parseType(), commsdsl::parse::ParseIntField::Type::Uintvar);
        TS_ASSERT_EQUALS(intField1.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField1.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField1.parseMaxLength(), 10U);
        TS_ASSERT_EQUALS(intField1.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField1.parseMinValue(), -intField1.parseSerOffset());
        TS_ASSERT_EQUALS(intField1.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint64_t>::max());
        TS_ASSERT_EQUALS(intField1.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field2 = fields[1];
        TS_ASSERT_EQUALS(field2.parseName(), "Int2");
        TS_ASSERT_EQUALS(field2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField2(field2);
        TS_ASSERT_EQUALS(intField2.parseType(), commsdsl::parse::ParseIntField::Type::Uintvar);
        TS_ASSERT_EQUALS(intField2.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField2.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField2.parseMaxLength(), 8U);
        TS_ASSERT_EQUALS(intField2.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField2.parseMinValue(), -intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseMaxValue(), 0xffffffffffffffLL - intField2.parseSerOffset());
        TS_ASSERT_EQUALS(intField2.parseDefaultValue(), 100);
    } while (false);

    do {
        auto& field3 = fields[2];
        TS_ASSERT_EQUALS(field3.parseName(), "Int3");
        TS_ASSERT(field3.parseDisplayName().empty());
        TS_ASSERT(field3.parseDescription().empty());
        TS_ASSERT_EQUALS(field3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        commsdsl::parse::ParseIntField intField3(field3);
        TS_ASSERT_EQUALS(intField3.parseType(), commsdsl::parse::ParseIntField::Type::Uintvar);
        TS_ASSERT_EQUALS(intField3.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(intField3.parseMinLength(), 1U);
        TS_ASSERT_EQUALS(intField3.parseMaxLength(), 3U);
        TS_ASSERT_EQUALS(intField3.parseSerOffset(), -100);
        TS_ASSERT_EQUALS(intField3.parseMinValue(), -intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseMaxValue(), 0x1fffff - intField3.parseSerOffset());
        TS_ASSERT_EQUALS(intField3.parseDefaultValue(), 100);
    } while (false);
}

void IntTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Int8);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), std::numeric_limits<std::int8_t>::min());
    TS_ASSERT_EQUALS(intField.parseMaxValue(), std::numeric_limits<std::int8_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 100);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT_EQUALS(validRanges.size(), 2U);
    auto& r1 = validRanges[0];
    auto& r2 = validRanges[1];
    TS_ASSERT_EQUALS(r1.m_min, 100);
    TS_ASSERT_EQUALS(r1.m_max, 101);
    TS_ASSERT_EQUALS(r2.m_min, 110);
    TS_ASSERT_EQUALS(r2.m_max, 120);
    TS_ASSERT_EQUALS(specialValues.size(), 3U);
    auto s1 = specialValues.find("val1");
    auto s2 = specialValues.find("val2");
    auto s3 = specialValues.find("otherVal2");
    TS_ASSERT_EQUALS(s1->second.m_value, 100);
    TS_ASSERT_EQUALS(s1->second.m_displayName, "Value 1");
    TS_ASSERT_EQUALS(s2->second.m_value, 101);
    TS_ASSERT(s2->second.m_displayName.empty());
    TS_ASSERT_EQUALS(s3->second.m_value, 101);
}

void IntTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Int8);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), std::numeric_limits<std::int8_t>::min());
    TS_ASSERT_EQUALS(intField.parseMaxValue(), std::numeric_limits<std::int8_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 100);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT_EQUALS(validRanges.size(), 2U);
    auto& r1 = validRanges[0];
    auto& r2 = validRanges[1];
    TS_ASSERT_EQUALS(r1.m_min, 100);
    TS_ASSERT_EQUALS(r1.m_max, 101);
    TS_ASSERT_EQUALS(r2.m_min, 110);
    TS_ASSERT_EQUALS(r2.m_max, 120);
    TS_ASSERT_EQUALS(specialValues.size(), 3U);
    auto s1 = specialValues.find("val1");
    auto s2 = specialValues.find("val2");
    auto s3 = specialValues.find("otherVal2");
    TS_ASSERT_EQUALS(s1->second.m_value, 100);
    TS_ASSERT_EQUALS(s2->second.m_value, 101);
    TS_ASSERT_EQUALS(s3->second.m_value, 101);
}

void IntTestSuite::test13()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields[0];

    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT_EQUALS(field.parseDisplayName(), "Int 1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Int16);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), std::numeric_limits<std::int16_t>::min());
    TS_ASSERT_EQUALS(intField.parseMaxValue(), std::numeric_limits<std::int16_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 500);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 10);
    TS_ASSERT_EQUALS(validRanges.size(), 1U);
    TS_ASSERT_EQUALS(validRanges.front().m_min, 400);
    TS_ASSERT_EQUALS(validRanges.front().m_max, intField.parseMaxValue());
    TS_ASSERT(specialValues.empty());
}

void IntTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 2U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields[0];

    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), std::numeric_limits<std::uint16_t>::min());
    TS_ASSERT_EQUALS(intField.parseMaxValue(), std::numeric_limits<std::uint16_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 0);
    TS_ASSERT_EQUALS(intField.parseDisplayDecimals(), 1);
    TS_ASSERT_EQUALS(intField.parseDisplayOffset(), 2);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 20);
    TS_ASSERT_EQUALS(validRanges.size(), 2U);
    TS_ASSERT_EQUALS(validRanges.front().m_min, 0);
    TS_ASSERT_EQUALS(validRanges.front().m_max, 10);
    TS_ASSERT_EQUALS(validRanges.back().m_min, 20);
    TS_ASSERT_EQUALS(validRanges.back().m_max, 20);
    TS_ASSERT_EQUALS(specialValues.size(), 2U);
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 1U);
    TS_ASSERT_EQUALS(specialValues.find("S2")->second.m_value, 2U);
}

void IntTestSuite::test16()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test18()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 2U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields[0];

    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), std::numeric_limits<std::uint16_t>::min());
    TS_ASSERT_EQUALS(intField.parseMaxValue(), std::numeric_limits<std::uint16_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 100);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT_EQUALS(validRanges.size(), 1U);
    TS_ASSERT_EQUALS(validRanges.front().m_min, 0);
    TS_ASSERT_EQUALS(validRanges.front().m_max, 2000);
    TS_ASSERT_EQUALS(specialValues.size(), 2U);
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 1000);
    TS_ASSERT_EQUALS(specialValues.find("S2")->second.m_value, 2000);
}

void IntTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Int1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(field);
    auto scaling = intField.parseScaling();
    auto& validRanges = intField.parseValidRanges();
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint16);
    TS_ASSERT_EQUALS(intField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(intField.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(intField.parseSerOffset(), 0);
    TS_ASSERT_EQUALS(intField.parseMinValue(), 0);
    TS_ASSERT_EQUALS(intField.parseMaxValue(), (std::intmax_t)std::numeric_limits<std::uint16_t>::max());
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 1000);
    TS_ASSERT_EQUALS(intField.parseValidCheckVersion(), true);
    TS_ASSERT(intField.parseExtraAttributes().empty());
    TS_ASSERT(intField.parseExtraElements().empty());
    TS_ASSERT_EQUALS(intField.parseUnits(), commsdsl::parse::ParseUnits::Unknown);
    TS_ASSERT_EQUALS(scaling.first, 1);
    TS_ASSERT_EQUALS(scaling.second, 1);
    TS_ASSERT_EQUALS(validRanges.size(), 2U);
    auto& r1 = validRanges[0];
    auto& r2 = validRanges[1];
    TS_ASSERT_EQUALS(r1.m_min, 0);
    TS_ASSERT_EQUALS(r1.m_max, 1000);
    TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
    TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT_EQUALS(r2.m_min, 1000);
    TS_ASSERT_EQUALS(r2.m_max, 2000);
    TS_ASSERT_EQUALS(r2.m_sinceVersion, 2U);
    TS_ASSERT_EQUALS(r2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT_EQUALS(specialValues.size(), 2U);
    auto& s1 = specialValues.find("S1")->second;
    auto& s2 = specialValues.find("S2")->second;
    TS_ASSERT_EQUALS(s1.m_value, 1000);
    TS_ASSERT_EQUALS(s1.m_sinceVersion, 0U);
    TS_ASSERT_EQUALS(s1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT_EQUALS(s1.m_description, "Some description");
    TS_ASSERT_EQUALS(s2.m_value, 2000);
    TS_ASSERT_EQUALS(s2.m_sinceVersion, 2U);
    TS_ASSERT_EQUALS(s2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT(s2.m_description.empty());
}

void IntTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    for (auto& f : fields) {
        TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    }


    commsdsl::parse::ParseIntField intField1(fields[0]);
    commsdsl::parse::ParseIntField intField2(fields[1]);
    commsdsl::parse::ParseIntField intField3(fields[2]);

    TS_ASSERT_EQUALS(intField1.parseUnits(), commsdsl::parse::ParseUnits::MetersPerSecond);
    TS_ASSERT_EQUALS(intField2.parseUnits(), commsdsl::parse::ParseUnits::MetersPerSecond);
    TS_ASSERT_EQUALS(intField3.parseUnits(), commsdsl::parse::ParseUnits::Millimeters);
}

void IntTestSuite::test22()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();

    auto verifyUnitsFunc =
        [&fields](unsigned from, unsigned count, commsdsl::parse::ParseUnits units)
        {
            TS_ASSERT_LESS_THAN_EQUALS(from + count, fields.size());
            for (auto idx = from; idx < (from + count); ++idx) {
                auto& f = fields[idx];
                TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);
                commsdsl::parse::ParseIntField intField(f);
                TS_ASSERT_EQUALS(intField.parseUnits(), units);
            }
        };

    auto nsOffset = 0;
    auto nsCount = 5;
    verifyUnitsFunc(nsOffset, nsCount, commsdsl::parse::ParseUnits::Nanoseconds);

    auto usOffset = nsOffset + nsCount;
    auto usCount = 5;
    verifyUnitsFunc(usOffset, usCount, commsdsl::parse::ParseUnits::Microseconds);

    auto msOffset = usOffset + usCount;
    auto msCount = 5;
    verifyUnitsFunc(msOffset, msCount, commsdsl::parse::ParseUnits::Milliseconds);

    auto sOffset = msOffset + msCount;
    auto sCount = 5;
    verifyUnitsFunc(sOffset, sCount, commsdsl::parse::ParseUnits::Seconds);

    auto minOffset = sOffset + sCount;
    auto minCount = 4;
    verifyUnitsFunc(minOffset, minCount, commsdsl::parse::ParseUnits::Minutes);

    auto hOffset = minOffset + minCount;
    auto hCount = 3;
    verifyUnitsFunc(hOffset, hCount, commsdsl::parse::ParseUnits::Hours);

    auto dOffset = hOffset + hCount;
    auto dCount = 3;
    verifyUnitsFunc(dOffset, dCount, commsdsl::parse::ParseUnits::Days);

    auto wOffset = dOffset + dCount;
    auto wCount = 3;
    verifyUnitsFunc(wOffset, wCount, commsdsl::parse::ParseUnits::Weeks);

    auto nmOffset = wOffset + wCount;
    auto nmCount = 5;
    verifyUnitsFunc(nmOffset, nmCount, commsdsl::parse::ParseUnits::Nanometers);

    auto umOffset = nmOffset + nmCount;
    auto umCount = 5;
    verifyUnitsFunc(umOffset, umCount, commsdsl::parse::ParseUnits::Micrometers);

    auto mmOffset = umOffset + umCount;
    auto mmCount = 5;
    verifyUnitsFunc(mmOffset, mmCount, commsdsl::parse::ParseUnits::Millimeters);

    auto cmOffset = mmOffset + mmCount;
    auto cmCount = 5;
    verifyUnitsFunc(cmOffset, cmCount, commsdsl::parse::ParseUnits::Centimeters);

    auto mOffset = cmOffset + cmCount;
    auto mCount = 5;
    verifyUnitsFunc(mOffset, mCount, commsdsl::parse::ParseUnits::Meters);

    auto kmOffset = mOffset + mCount;
    auto kmCount = 5;
    verifyUnitsFunc(kmOffset, kmCount, commsdsl::parse::ParseUnits::Kilometers);

    auto nmpsOffset = kmOffset + kmCount;
    auto nmpsCount = 6;
    verifyUnitsFunc(nmpsOffset, nmpsCount, commsdsl::parse::ParseUnits::NanometersPerSecond);

    auto umpsOffset = nmpsOffset + nmpsCount;
    auto umpsCount = 6;
    verifyUnitsFunc(umpsOffset, umpsCount, commsdsl::parse::ParseUnits::MicrometersPerSecond);

    auto mmpsOffset = umpsOffset + umpsCount;
    auto mmpsCount = 6;
    verifyUnitsFunc(mmpsOffset, mmpsCount, commsdsl::parse::ParseUnits::MillimetersPerSecond);

    auto cmpsOffset = mmpsOffset + mmpsCount;
    auto cmpsCount = 6;
    verifyUnitsFunc(cmpsOffset, cmpsCount, commsdsl::parse::ParseUnits::CentimetersPerSecond);

    auto mpsOffset = cmpsOffset + cmpsCount;
    auto mpsCount = 6;
    verifyUnitsFunc(mpsOffset, mpsCount, commsdsl::parse::ParseUnits::MetersPerSecond);

    auto kmpsOffset = mpsOffset + mpsCount;
    auto kmpsCount = 7;
    verifyUnitsFunc(kmpsOffset, kmpsCount, commsdsl::parse::ParseUnits::KilometersPerSecond);

    auto kmphOffset = kmpsOffset + kmpsCount;
    auto kmphCount = 7;
    verifyUnitsFunc(kmphOffset, kmphCount, commsdsl::parse::ParseUnits::KilometersPerHour);

    auto hzOffset = kmphOffset + kmphCount;
    auto hzCount = 2;
    verifyUnitsFunc(hzOffset, hzCount, commsdsl::parse::ParseUnits::Hertz);

    auto khzOffset = hzOffset + hzCount;
    auto khzCount = 2;
    verifyUnitsFunc(khzOffset, khzCount, commsdsl::parse::ParseUnits::KiloHertz);

    auto mhzOffset = khzOffset + khzCount;
    auto mhzCount = 2;
    verifyUnitsFunc(mhzOffset, mhzCount, commsdsl::parse::ParseUnits::MegaHertz);

    auto ghzOffset = mhzOffset + mhzCount;
    auto ghzCount = 2;
    verifyUnitsFunc(ghzOffset, ghzCount, commsdsl::parse::ParseUnits::GigaHertz);

    auto degOffset = ghzOffset + ghzCount;
    auto degCount = 3;
    verifyUnitsFunc(degOffset, degCount, commsdsl::parse::ParseUnits::Degrees);

    auto radOffset = degOffset + degCount;
    auto radCount = 3;
    verifyUnitsFunc(radOffset, radCount, commsdsl::parse::ParseUnits::Radians);

    auto naOffset = radOffset + radCount;
    auto naCount = 5;
    verifyUnitsFunc(naOffset, naCount, commsdsl::parse::ParseUnits::Nanoamps);

    auto uaOffset = naOffset + naCount;
    auto uaCount = 5;
    verifyUnitsFunc(uaOffset, uaCount, commsdsl::parse::ParseUnits::Microamps);

    auto maOffset = uaOffset + uaCount;
    auto maCount = 5;
    verifyUnitsFunc(maOffset, maCount, commsdsl::parse::ParseUnits::Milliamps);

    auto aOffset = maOffset + maCount;
    auto aCount = 5;
    verifyUnitsFunc(aOffset, aCount, commsdsl::parse::ParseUnits::Amps);

    auto kaOffset = aOffset + aCount;
    auto kaCount = 5;
    verifyUnitsFunc(kaOffset, kaCount, commsdsl::parse::ParseUnits::Kiloamps);

    auto nvOffset = kaOffset + kaCount;
    auto nvCount = 3;
    verifyUnitsFunc(nvOffset, nvCount, commsdsl::parse::ParseUnits::Nanovolts);

    auto uvOffset = nvOffset + nvCount;
    auto uvCount = 3;
    verifyUnitsFunc(uvOffset, uvCount, commsdsl::parse::ParseUnits::Microvolts);

    auto mvOffset = uvOffset + uvCount;
    auto mvCount = 3;
    verifyUnitsFunc(mvOffset, mvCount, commsdsl::parse::ParseUnits::Millivolts);

    auto vOffset = mvOffset + mvCount;
    auto vCount = 3;
    verifyUnitsFunc(vOffset, vCount, commsdsl::parse::ParseUnits::Volts);

    auto kvOffset = vOffset + vCount;
    auto kvCount = 3;
    verifyUnitsFunc(kvOffset, kvCount, commsdsl::parse::ParseUnits::Kilovolts);

    auto bOffset = kvOffset + kvCount;
    auto bCount = 3;
    verifyUnitsFunc(bOffset, bCount, commsdsl::parse::ParseUnits::Bytes);    

    auto kbOffset = bOffset + bCount;
    auto kbCount = 3;
    verifyUnitsFunc(kbOffset, kbCount, commsdsl::parse::ParseUnits::Kilobytes);      

    auto mbOffset = kbOffset + kbCount;
    auto mbCount = 3;
    verifyUnitsFunc(mbOffset, mbCount, commsdsl::parse::ParseUnits::Megabytes);  

    auto gbOffset = mbOffset + mbCount;
    auto gbCount = 3;
    verifyUnitsFunc(gbOffset, gbCount, commsdsl::parse::ParseUnits::Gigabytes);  

    auto tbOffset = gbOffset + gbCount;
    auto tbCount = 3;
    verifyUnitsFunc(tbOffset, tbCount, commsdsl::parse::ParseUnits::Terabytes);               
}

void IntTestSuite::test23()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    commsdsl::parse::ParseIntField intField(fields[0]);
    TS_ASSERT(!intField.parseSignExt());
}

void IntTestSuite::test24()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test25()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    commsdsl::parse::ParseIntField intField(fields[0]);
    TS_ASSERT_EQUALS(intField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);
}

void IntTestSuite::test27()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);
    
    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "Int4");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 5);
}

void IntTestSuite::test28()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);
    
    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "Int2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint64);
    TS_ASSERT_EQUALS(static_cast<std::uintmax_t>(intField.parseDefaultValue()), 0xffffffffffffffff);
}

void IntTestSuite::test29()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);    
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test30()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);    
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test31()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test32()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseType(), commsdsl::parse::ParseIntField::Type::Uint8);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 0U);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 1);
}

void IntTestSuite::test33()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema33.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 10);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 5);
}

void IntTestSuite::test34()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema34.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test35()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema35.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 10);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 5);
}

void IntTestSuite::test36()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema36.xml");
    TS_ASSERT(protocol);
}

void IntTestSuite::test37()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema37.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F3");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 10);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 20);
}

void IntTestSuite::test38()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema38.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 10);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 20);
}

void IntTestSuite::test39()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema39.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F2");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 1);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 0);
}

void IntTestSuite::test40()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema40.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages.front();

    auto fields = msg1.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& f = fields.back();
    TS_ASSERT_EQUALS(f.parseName(), "F1");
    TS_ASSERT_EQUALS(f.parseKind(), commsdsl::parse::ParseField::Kind::Int);

    commsdsl::parse::ParseIntField intField(f);
    TS_ASSERT_EQUALS(intField.parseDefaultValue(), 1);
    auto& specialValues = intField.parseSpecialValues();
    TS_ASSERT_EQUALS(specialValues.find("S1")->second.m_value, 10);
}

void IntTestSuite::test41()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema41.xml");
    TS_ASSERT(protocol);
}


void IntTestSuite::test42()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema42.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());    

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);    

    auto& f1 = fields[0];
    auto& f2 = fields[1];
    auto& f3 = fields[2];

    TS_ASSERT(f1.parseIsForceGen());
    TS_ASSERT(!f2.parseIsForceGen());
    TS_ASSERT(!f3.parseIsForceGen());
}

void IntTestSuite::test43()
{
    std::vector<std::string> schemas = {
        SCHEMAS_DIR "/Schema43_1.xml",
        SCHEMAS_DIR "/Schema43_2.xml"
    };

    auto protocol = prepareProtocol(schemas, true);
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());    

    auto fields = ns.parseFields();
    do {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());    

        auto& f1 = fields[0];
        TS_ASSERT_EQUALS(f1.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intF1(f1);
        TS_ASSERT_EQUALS(intF1.parseDefaultValue(), 1);
        auto& specials = intF1.parseSpecialValues();
        auto sp1Iter = specials.find("S1");
        TS_ASSERT(sp1Iter != specials.end());
        TS_ASSERT_EQUALS(sp1Iter->second.m_value, 1U);
    } while (false);

    do {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());    

        auto& f2 = fields[1];
        TS_ASSERT_EQUALS(f2.parseKind(), commsdsl::parse::ParseField::Kind::Int);

        commsdsl::parse::ParseIntField intF2(f2);
        auto& specials = intF2.parseSpecialValues();
        auto sp1Iter = specials.find("S1");
        TS_ASSERT(sp1Iter != specials.end());
        TS_ASSERT_EQUALS(sp1Iter->second.m_value, 1U);
    } while (false);    
}
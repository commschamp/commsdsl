#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseEnumField.h"

class EnumTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();   
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();
    void test31();
    void test32();
    void test33();
};

void EnumTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void EnumTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void EnumTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uint8);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(enumField.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField.bitLength(), 0U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), 0);
    TS_ASSERT(!enumField.isNonUniqueAllowed());
    TS_ASSERT(enumField.isUnique());
    TS_ASSERT(!enumField.validCheckVersion());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    auto& v3 = values.find("V3")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v1.m_description, "desc1");
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v2.m_description, "desc2");
    TS_ASSERT_EQUALS(v3.m_value, 3);
    TS_ASSERT_EQUALS(v3.m_description, "desc3");
    TS_ASSERT_EQUALS(revValues.find(1)->second, "V1");
    TS_ASSERT_EQUALS(revValues.find(2)->second, "V2");
    TS_ASSERT_EQUALS(revValues.find(3)->second, "V3");
    TS_ASSERT(!enumField.hexAssign());
}

void EnumTestSuite::test2()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uint16);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(enumField.minLength(), 2U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), 2);
    TS_ASSERT(enumField.isNonUniqueAllowed());
    TS_ASSERT(!enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 5);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    TS_ASSERT_EQUALS(values.find("V1")->second.m_value, 1);
    TS_ASSERT(values.find("V1")->second.m_description.empty());
    TS_ASSERT_EQUALS(values.find("V2")->second.m_value, 1);
    TS_ASSERT_EQUALS(values.find("V3")->second.m_value, 2);
    TS_ASSERT_EQUALS(values.find("V4")->second.m_value, 5);
    TS_ASSERT_EQUALS(values.find("V5")->second.m_value, 2);
    auto range1 = revValues.equal_range(1);
    TS_ASSERT_EQUALS(std::distance(range1.first, range1.second), 2);
    auto range2 = revValues.equal_range(2);
    TS_ASSERT_EQUALS(std::distance(range2.first, range2.second), 2);
    auto range3 = revValues.equal_range(5);
    TS_ASSERT_EQUALS(std::distance(range3.first, range3.second), 1);
    TS_ASSERT(enumField.hexAssign());
}

void EnumTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uint64);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(enumField.minLength(), 8U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), 0xffffffffffffffff);
    TS_ASSERT(!enumField.isNonUniqueAllowed());
    TS_ASSERT(enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    TS_ASSERT_EQUALS(values.find("V1")->second.m_value, 0x0123456789abcdef);
    TS_ASSERT_EQUALS(values.find("V2")->second.m_value, 0xabcd);
    TS_ASSERT_EQUALS(values.find("Null")->second.m_value, 0xffffffffffffffff);
    TS_ASSERT_EQUALS(revValues.find(0x0123456789abcdef)->second, "V1");
    TS_ASSERT_EQUALS(revValues.find(0xabcd)->second, "V2");
    TS_ASSERT_EQUALS(revValues.find(0xffffffffffffffff)->second, "Null");
}

void EnumTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uintvar);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField.maxLength(), 10U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), 0xffffffffffffffff);
    TS_ASSERT(!enumField.isNonUniqueAllowed());
    TS_ASSERT(enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    TS_ASSERT_EQUALS(values.find("V1")->second.m_value, 0x0123456789abcdef);
    TS_ASSERT_EQUALS(values.find("V2")->second.m_value, 0xabcd);
    TS_ASSERT_EQUALS(values.find("Null")->second.m_value, 0xffffffffffffffff);
    TS_ASSERT_EQUALS(revValues.find(0x0123456789abcdef)->second, "V1");
    TS_ASSERT_EQUALS(revValues.find(0xabcd)->second, "V2");
    TS_ASSERT_EQUALS(revValues.find(0xffffffffffffffff)->second, "Null");
}

void EnumTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uintvar);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField.maxLength(), 6U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), (std::intmax_t)0x3ffffffffff);
    TS_ASSERT(!enumField.isNonUniqueAllowed());
    TS_ASSERT(enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    TS_ASSERT_EQUALS(values.find("V1")->second.m_value, (std::intmax_t)0x0123456789ab);
    TS_ASSERT_EQUALS(values.find("V2")->second.m_value, 0xabcd);
    TS_ASSERT_EQUALS(values.find("Null")->second.m_value, (std::intmax_t)0x3ffffffffff);
    TS_ASSERT_EQUALS(revValues.find(0x0123456789ab)->second, "V1");
    TS_ASSERT_EQUALS(revValues.find(0xabcd)->second, "V2");
    TS_ASSERT_EQUALS(revValues.find(0x3ffffffffff)->second, "Null");
}

void EnumTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Intvar);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField.maxLength(), 6U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), (std::intmax_t)0x3ffffffffff);
    TS_ASSERT(!enumField.isNonUniqueAllowed());
    TS_ASSERT(enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    TS_ASSERT_EQUALS(values.find("V1")->second.m_value, (std::intmax_t)0x0123456789ab);
    TS_ASSERT_EQUALS(values.find("V2")->second.m_value, 0xabcd);
    TS_ASSERT_EQUALS(values.find("Null")->second.m_value, (std::intmax_t)0x3ffffffffff);
    TS_ASSERT_EQUALS(revValues.find(0x0123456789ab)->second, "V1");
    TS_ASSERT_EQUALS(revValues.find(0xabcd)->second, "V2");
    TS_ASSERT_EQUALS(revValues.find(0x3ffffffffff)->second, "Null");
}

void EnumTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field1 = fields.front();
    auto& field2 = fields.back();

    TS_ASSERT_EQUALS(field1.name(), "Enum1");
    TS_ASSERT_EQUALS(field2.name(), "Enum2");
    TS_ASSERT_EQUALS(field1.kind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(field1.kind(), field2.kind());

    commsdsl::parse::ParseEnumField enumField1(field1);
    auto& values1 = enumField1.values();
    auto& revValues1 = enumField1.revValues();

    commsdsl::parse::ParseEnumField enumField2(field2);
    auto& values2 = enumField2.values();
    auto& revValues2 = enumField2.revValues();

    TS_ASSERT_EQUALS(enumField1.type(), commsdsl::parse::ParseIntField::Type::Uint8);
    TS_ASSERT_EQUALS(enumField1.type(), enumField2.type());
    TS_ASSERT_EQUALS(enumField1.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField1.endian(), enumField2.endian());
    TS_ASSERT_EQUALS(enumField1.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField1.minLength(), enumField2.minLength());
    TS_ASSERT_EQUALS(enumField1.defaultValue(), (std::intmax_t)0xff);
    TS_ASSERT(!enumField1.isNonUniqueAllowed());
    TS_ASSERT(!enumField2.isNonUniqueAllowed());
    TS_ASSERT(enumField1.isUnique());
    TS_ASSERT(enumField2.isUnique());
    TS_ASSERT_EQUALS(values1.size(), 3);
    TS_ASSERT_EQUALS(values2.size(), 4);
    TS_ASSERT_EQUALS(revValues1.size(), values1.size());
    TS_ASSERT_EQUALS(values1.find("V1")->second.m_value, 1);
    TS_ASSERT_EQUALS(values1.find("V2")->second.m_value, 2);
    TS_ASSERT_EQUALS(values1.find("Null")->second.m_value, (std::intmax_t)0xff);
    TS_ASSERT_EQUALS(values2.find("V1")->second.m_value, 1);
    TS_ASSERT_EQUALS(values2.find("V2")->second.m_value, 2);
    TS_ASSERT_EQUALS(values2.find("V3")->second.m_value, 3);
    TS_ASSERT_EQUALS(values2.find("Null")->second.m_value, (std::intmax_t)0xff);
    TS_ASSERT_EQUALS(revValues1.find(1)->second, "V1");
    TS_ASSERT_EQUALS(revValues1.find(2)->second, "V2");
    TS_ASSERT_EQUALS(revValues1.find(0xff)->second, "Null");
    TS_ASSERT_EQUALS(revValues2.find(1)->second, "V1");
    TS_ASSERT_EQUALS(revValues2.find(2)->second, "V2");
    TS_ASSERT_EQUALS(revValues2.find(3)->second, "V3");
    TS_ASSERT_EQUALS(revValues2.find(0xff)->second, "Null");
}

void EnumTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 2U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field2 = fields.back();

    TS_ASSERT_EQUALS(field2.name(), "Enum2");
    TS_ASSERT_EQUALS(field2.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField2(field2);
    auto& values2 = enumField2.values();
    auto& revValues2 = enumField2.revValues();

    TS_ASSERT_EQUALS(enumField2.type(), commsdsl::parse::ParseIntField::Type::Uint8);
    TS_ASSERT_EQUALS(enumField2.endian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(enumField2.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField2.defaultValue(), 1);
    TS_ASSERT(!enumField2.isNonUniqueAllowed());
    TS_ASSERT(enumField2.isUnique());
    TS_ASSERT(enumField2.validCheckVersion());
    TS_ASSERT_EQUALS(values2.size(), 4);
    TS_ASSERT_EQUALS(revValues2.size(), values2.size());
    auto v1Iter = values2.find("V1");
    auto v2Iter = values2.find("V2");
    auto v3Iter = values2.find("V3");
    auto nullIter = values2.find("Null");
    TS_ASSERT_EQUALS(v1Iter->second.m_value, 1);
    TS_ASSERT_EQUALS(v1Iter->second.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(v1Iter->second.m_deprecatedSince, commsdsl::parse::ParseProtocol::notYetDeprecated());
    TS_ASSERT_EQUALS(v2Iter->second.m_value, 2);
    TS_ASSERT_EQUALS(v2Iter->second.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(v2Iter->second.m_deprecatedSince, 2);
    TS_ASSERT_EQUALS(v3Iter->second.m_value, 3);
    TS_ASSERT_EQUALS(v3Iter->second.m_sinceVersion, 2);
    TS_ASSERT_EQUALS(v3Iter->second.m_deprecatedSince, commsdsl::parse::ParseProtocol::notYetDeprecated());
    TS_ASSERT_EQUALS(nullIter->second.m_value, (std::intmax_t)0xff);
    TS_ASSERT_EQUALS(nullIter->second.m_sinceVersion, 0);
    TS_ASSERT_EQUALS(nullIter->second.m_deprecatedSince, commsdsl::parse::ParseProtocol::notYetDeprecated());
    TS_ASSERT_EQUALS(revValues2.find(1)->second, "V1");
    TS_ASSERT_EQUALS(revValues2.find(2)->second, "V2");
    TS_ASSERT_EQUALS(revValues2.find(3)->second, "V3");
    TS_ASSERT_EQUALS(revValues2.find(0xff)->second, "Null");
}

void EnumTestSuite::test10()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test13()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    auto& revValues = enumField.revValues();
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uint32);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField.minLength(), 3U);
    TS_ASSERT_EQUALS(enumField.defaultValue(), 2);
    TS_ASSERT(enumField.isNonUniqueAllowed());
    TS_ASSERT(!enumField.isUnique());
    TS_ASSERT_EQUALS(values.size(), 3);
    TS_ASSERT_EQUALS(revValues.size(), values.size());
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    auto& v3 = values.find("V3")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v1.m_displayName, "Value1");
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v2.m_displayName, "Value2");
    TS_ASSERT_EQUALS(v3.m_value, 2);
    TS_ASSERT_EQUALS(v3.m_displayName, "Value3");
    TS_ASSERT_EQUALS(revValues.find(1)->second, "V1");
    auto er = revValues.equal_range(2);
    TS_ASSERT_EQUALS(std::distance(er.first, er.second), 2);
}

void EnumTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test18()
{
    // Since v7.1 multiple messageID fields are supported
    //m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    //m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Enum1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    TS_ASSERT_EQUALS(enumField.type(), commsdsl::parse::ParseIntField::Type::Uintvar);
    TS_ASSERT_EQUALS(enumField.endian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(enumField.minLength(), 1U);
    TS_ASSERT_EQUALS(enumField.maxLength(), 2U);
}

void EnumTestSuite::test20()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test21()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test23()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "E1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 8);
    TS_ASSERT_EQUALS(values.size(), 1);
    auto& v1 = values.find("V1")->second;
    TS_ASSERT_EQUALS(v1.m_value, 8);    
}

void EnumTestSuite::test24()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 4);
    TS_ASSERT_EQUALS(values.size(), 3);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    auto& v3 = values.find("V3")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v3.m_value, 3);
}

void EnumTestSuite::test25()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 4);
    TS_ASSERT_EQUALS(values.size(), 3);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    auto& v3 = values.find("V3")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v3.m_value, 3);
}

void EnumTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 3);
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v2.m_value, 2);
}

void EnumTestSuite::test27()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 3);
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v2.m_value, 2);
}

void EnumTestSuite::test28()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test29()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 1);
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v2.m_value, 2);
}

void EnumTestSuite::test30()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 1);
    TS_ASSERT_EQUALS(enumField.displayName(), "Desc1");
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v1.m_displayName, "Desc2");
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v2.m_displayName, "Desc3");
}

void EnumTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 1);
    TS_ASSERT_EQUALS(enumField.displayName(), "^ns1.F1");
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v1.m_displayName, "^ns1.F2");
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v2.m_displayName, "^ns1.F3");
}

void EnumTestSuite::test32()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);
}

void EnumTestSuite::test33()
{
    std::vector<std::string> schemas = {
        SCHEMAS_DIR "/Schema33_1.xml",
        SCHEMAS_DIR "/Schema33_2.xml"
    };

    auto protocol = prepareProtocol(schemas, true);
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 5U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F5");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Enum);

    commsdsl::parse::ParseEnumField enumField(field);
    auto& values = enumField.values();
    TS_ASSERT_EQUALS(enumField.defaultValue(), 1);
    TS_ASSERT_EQUALS(enumField.displayName(), "Desc1");
    TS_ASSERT_EQUALS(values.size(), 2);
    auto& v1 = values.find("V1")->second;
    auto& v2 = values.find("V2")->second;
    TS_ASSERT_EQUALS(v1.m_value, 1);
    TS_ASSERT_EQUALS(v1.m_displayName, "Desc2");
    TS_ASSERT_EQUALS(v2.m_value, 2);
    TS_ASSERT_EQUALS(v2.m_displayName, "Desc3");
}
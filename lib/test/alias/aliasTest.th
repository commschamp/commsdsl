#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseAlias.h"
#include "commsdsl/parse/ParseBundleField.h"

class AliasTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
};

void AliasTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void AliasTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void AliasTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");

    auto aliases = msg1.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 2U);

    auto& a0 = aliases[0];
    auto& a1 = aliases[1];

    TS_ASSERT_EQUALS(a0.parseName(), "A1");
    TS_ASSERT_EQUALS(a0.parseDescription(), "A1");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");

    TS_ASSERT_EQUALS(a1.parseName(), "A2");
    TS_ASSERT_EQUALS(a1.parseDescription(), "A2");
    TS_ASSERT_EQUALS(a1.parseFieldName(), "F2");
}

void AliasTestSuite::test2()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test4()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test6()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg2 = messages.back();
    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");

    auto aliases = msg2.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 2U);

    auto& a0 = aliases[0];
    auto& a1 = aliases[1];

    TS_ASSERT_EQUALS(a0.parseName(), "A1");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");

    TS_ASSERT_EQUALS(a1.parseName(), "A2");
    TS_ASSERT_EQUALS(a1.parseFieldName(), "F2");
}

void AliasTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 3U);

    do {
        auto& msg2 = messages[1];
        TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");

        auto aliases = msg2.parseAliases();
        TS_ASSERT_EQUALS(aliases.size(), 1U);

        auto& a0 = aliases[0];

        TS_ASSERT_EQUALS(a0.parseName(), "A2");
        TS_ASSERT_EQUALS(a0.parseFieldName(), "F2");
    } while (false);

    do {
        auto& msg3 = messages[2];
        TS_ASSERT_EQUALS(msg3.parseName(), "Msg3");

        auto fields = msg3.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 2U);

        auto aliases = msg3.parseAliases();
        TS_ASSERT_EQUALS(aliases.size(), 2U);

        auto& a0 = aliases[0];
        auto& a1 = aliases[1];

        TS_ASSERT_EQUALS(a0.parseName(), "A1");
        TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");
        TS_ASSERT_EQUALS(a1.parseName(), "A2");
        TS_ASSERT_EQUALS(a1.parseFieldName(), "F2");
    } while (false);    
}

void AliasTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg2 = messages.back();
    TS_ASSERT_EQUALS(msg2.parseId(), 5);
    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");

    auto aliases = msg2.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 1U);

    auto& a0 = aliases[0];

    TS_ASSERT_EQUALS(a0.parseName(), "A2");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F2");
}

void AliasTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& f1 = fields[0];
    TS_ASSERT_EQUALS(f1.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);

    commsdsl::parse::ParseBundleField bundle1(f1);
    auto aliases = bundle1.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 3U);

    auto& a0 = aliases[0];
    auto& a1 = aliases[1];
    auto& a2 = aliases[2];

    TS_ASSERT_EQUALS(a0.parseName(), "A1");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");

    TS_ASSERT_EQUALS(a1.parseName(), "A2");
    TS_ASSERT_EQUALS(a1.parseFieldName(), "F2.M1");

    TS_ASSERT_EQUALS(a2.parseName(), "A3");
    TS_ASSERT_EQUALS(a2.parseFieldName(), "F2.M2");
}

void AliasTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test13()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto interfaces = ns.parseInterfaces();
    TS_ASSERT_EQUALS(interfaces.size(), 1U);

    auto& i1 = interfaces[0];
    TS_ASSERT_EQUALS(i1.parseName(), "I1");

    auto aliases = i1.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 2U);

    auto& a0 = aliases[0];
    auto& a1 = aliases[1];

    TS_ASSERT_EQUALS(a0.parseName(), "A1");
    TS_ASSERT_EQUALS(a0.parseDescription(), "A1");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");

    TS_ASSERT_EQUALS(a1.parseName(), "A2");
    TS_ASSERT_EQUALS(a1.parseDescription(), "A2");
    TS_ASSERT_EQUALS(a1.parseFieldName(), "F2");
}

void AliasTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void AliasTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto interfaces = ns.parseInterfaces();
    TS_ASSERT_EQUALS(interfaces.size(), 2U);

    auto& i2 = interfaces.back();
    TS_ASSERT_EQUALS(i2.parseName(), "I2");

    auto aliases = i2.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 2U);

    auto& a0 = aliases[0];
    auto& a1 = aliases[1];

    TS_ASSERT_EQUALS(a0.parseName(), "A1");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F1");

    TS_ASSERT_EQUALS(a1.parseName(), "A2");
    TS_ASSERT_EQUALS(a1.parseFieldName(), "F2");
}

void AliasTestSuite::test17()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto interfaces = ns.parseInterfaces();
    TS_ASSERT_EQUALS(interfaces.size(), 2U);

    auto& i2 = interfaces.back();
    TS_ASSERT_EQUALS(i2.parseName(), "I2");

    auto aliases = i2.parseAliases();
    TS_ASSERT_EQUALS(aliases.size(), 1U);

    auto& a0 = aliases[0];

    TS_ASSERT_EQUALS(a0.parseName(), "A2");
    TS_ASSERT_EQUALS(a0.parseFieldName(), "F2");
}

void AliasTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto interfaces = ns.parseInterfaces();
    TS_ASSERT_EQUALS(interfaces.size(), 2U);

    auto& i2 = interfaces.back();
    TS_ASSERT_EQUALS(i2.parseName(), "I2");

    auto aliases = i2.parseAliases();
    TS_ASSERT(aliases.empty());
}

void AliasTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg2 = messages.back();
    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");

    auto aliases = msg2.parseAliases();
    TS_ASSERT(aliases.empty());
}
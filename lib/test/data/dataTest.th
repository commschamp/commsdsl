#include <limits>

#include "CommonTestSuite.h"

class DataTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
};

void DataTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void DataTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void DataTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Data1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::size_t>::max());

    commsdsl::parse::DataField dataField(field);
    TS_ASSERT(dataField.defaultValue().empty());
    TS_ASSERT_EQUALS(dataField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), false);
    TS_ASSERT(!dataField.lengthPrefixField().valid());
}

void DataTestSuite::test2()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Data1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue = {0xaa, 0xbb, 0xcc, 0xdd, 0xee};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 4U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), false);
    TS_ASSERT(!dataField.lengthPrefixField().valid());
}

void DataTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Data1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    commsdsl::parse::DataField dataField(field);
    TS_ASSERT(dataField.defaultValue().empty());
    TS_ASSERT_EQUALS(dataField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), true);
    auto lenPrefix = dataField.lengthPrefixField();
    TS_ASSERT(lenPrefix.valid());
    TS_ASSERT_EQUALS(lenPrefix.kind(), commsdsl::parse::Field::Kind::Int);
    TS_ASSERT_EQUALS(lenPrefix.externalRef(), "@Schema4.DataLen");
}

void DataTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Data1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    commsdsl::parse::DataField dataField(field);
    TS_ASSERT(dataField.defaultValue().empty());
    TS_ASSERT_EQUALS(dataField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), true);
    auto lenPrefix = dataField.lengthPrefixField();
    TS_ASSERT(lenPrefix.valid());
    TS_ASSERT_EQUALS(lenPrefix.kind(), commsdsl::parse::Field::Kind::Int);
    TS_ASSERT(lenPrefix.externalRef().empty());
}

void DataTestSuite::test6()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "Data2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 10U);
    TS_ASSERT_EQUALS(field.maxLength(), 10U);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0xab, 0xcd};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 10U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), false);
    auto lenPrefix = dataField.lengthPrefixField();
    TS_ASSERT(!lenPrefix.valid());
}

void DataTestSuite::test8()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "Data2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0xab, 0xcd, 0xef, 0x01, 0x23};
    TS_ASSERT(!dataField.defaultValue().empty());
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 4U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), false);
    auto lenPrefix = dataField.lengthPrefixField();
    TS_ASSERT(!lenPrefix.valid());
}

void DataTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.name(), "Data2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 2U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::uint16_t>::max() + field.minLength());

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0xab, 0xcd, 0xef, 0x01, 0x23};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(dataField.hasLengthPrefixField(), true);
    auto lenPrefix = dataField.lengthPrefixField();
    TS_ASSERT(lenPrefix.valid());
    TS_ASSERT_EQUALS(lenPrefix.kind(), commsdsl::parse::Field::Kind::Int);
    commsdsl::parse::IntField intLenPrefix(lenPrefix);
    TS_ASSERT_EQUALS(intLenPrefix.type(), commsdsl::parse::IntField::Type::Uint16);
    TS_ASSERT_EQUALS(intLenPrefix.endian(), commsdsl::parse::Endian_Little);
    TS_ASSERT(dataField.detachedPrefixFieldName().empty());
}

void DataTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg = messages.front();
    auto fields = msg.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);
    TS_ASSERT_EQUALS(field.minLength(), 0U);

    commsdsl::parse::DataField dataField(field);
    TS_ASSERT_EQUALS(dataField.detachedPrefixFieldName(), "F1");
}

void DataTestSuite::test13()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "D2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0x01, 0x02, 0x03, 0x04, 0x05};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 5U);
}

void DataTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "D2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0x01, 0x02, 0x03, 0x04, 0x05};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
    TS_ASSERT_EQUALS(dataField.fixedLength(), 5U);
}

void DataTestSuite::test19()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
}

void DataTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0x01, 0x02, 0x03, 0x04, 0x05};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
}

void DataTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0x01, 0x02, 0x03, 0x04, 0x05};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
}

void DataTestSuite::test22()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    commsdsl::parse::DataField dataField(field);
    commsdsl::parse::DataField::ValueType expDefaultValue{0xab, 0xcd};
    TS_ASSERT_EQUALS(dataField.defaultValue(), expDefaultValue);
}


void DataTestSuite::test23()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Data1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::Field::Kind::Data);

    using ValueType = commsdsl::parse::DataField::ValueType;
    commsdsl::parse::DataField dataField(field);
    auto& validValues = dataField.validValues();
    TS_ASSERT_EQUALS(validValues.size(), 3U);
    TS_ASSERT_EQUALS(validValues[0].m_value, ValueType({0x01, 0x02}));
    TS_ASSERT_EQUALS(validValues[0].m_sinceVersion, 1);
    TS_ASSERT_EQUALS(validValues[0].m_deprecatedSince, 4);
    TS_ASSERT_EQUALS(validValues[1].m_value, ValueType({0x03, 0x04}));
    TS_ASSERT_EQUALS(validValues[1].m_sinceVersion, 3);
    TS_ASSERT_EQUALS(validValues[1].m_deprecatedSince, protocol->notYetDeprecated());    
    TS_ASSERT_EQUALS(validValues[2].m_value, ValueType({0x05, 0x06}));
    TS_ASSERT_EQUALS(validValues[2].m_sinceVersion, 0);
    TS_ASSERT_EQUALS(validValues[2].m_deprecatedSince, protocol->notYetDeprecated());        
}
#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseBundleField.h"
#include "commsdsl/parse/ParseOptionalField.h"

class OptionalTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();    
    void test30(); 
    void test31(); 
    void test32(); 
    void test33(); 
    void test34(); 
    void test35();
    void test36();
    void test37();
    void test38();
    void test39();
    void test40();
    void test41();
    void test42();
    void test43();
    void test44();
};

void OptionalTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void OptionalTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void OptionalTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Opt1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Optional);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), 1U);
    TS_ASSERT_EQUALS(field.bitLength(), 0U);

    commsdsl::parse::ParseOptionalField optField(field);
    auto wrappedField = optField.field();
    TS_ASSERT_EQUALS(wrappedField.kind(), commsdsl::parse::ParseField::Kind::Int);

    TS_ASSERT(!optField.cond().valid());
}

void OptionalTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "Opt1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Optional);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), 1U);
    TS_ASSERT_EQUALS(field.bitLength(), 0U);

    commsdsl::parse::ParseOptionalField optField(field);
    auto wrappedField = optField.field();
    TS_ASSERT_EQUALS(wrappedField.kind(), commsdsl::parse::ParseField::Kind::Int);

    TS_ASSERT(!optField.cond().valid());
}

void OptionalTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);
    TS_ASSERT_EQUALS(field.bitLength(), 0U);


    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];

    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);
    TS_ASSERT_EQUALS(mem3.kind(), commsdsl::parse::ParseField::Kind::Optional)

    commsdsl::parse::ParseOptionalField opt1(mem2);
    auto cond1 = opt1.cond();
    TS_ASSERT_EQUALS(cond1.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond1(cond1);
    TS_ASSERT(exprCond1.left().empty());
    TS_ASSERT(exprCond1.op().empty());
    TS_ASSERT_EQUALS(exprCond1.right(), "$Mem1.b0");

    commsdsl::parse::ParseOptionalField opt2(mem3);
    auto cond2 = opt2.cond();
    TS_ASSERT_EQUALS(cond2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond2(cond2);
    TS_ASSERT(exprCond2.left().empty());
    TS_ASSERT_EQUALS(exprCond2.op(), "!");
    TS_ASSERT_EQUALS(exprCond2.right(), "$Mem1.b0");
}

void OptionalTestSuite::test4()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto wrappedField = optField.field();
    TS_ASSERT_EQUALS(wrappedField.kind(), commsdsl::parse::ParseField::Kind::Int);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "=");
    TS_ASSERT_EQUALS(exprCond.right(), "5");
}

void OptionalTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto wrappedField = optField.field();
    TS_ASSERT_EQUALS(wrappedField.kind(), commsdsl::parse::ParseField::Kind::Int);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "<=");
    TS_ASSERT_EQUALS(exprCond.right(), "5");
}

void OptionalTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 2U);
    TS_ASSERT_EQUALS(field.maxLength(), 3U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Ref);
    TS_ASSERT_EQUALS(mem3.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem3);
    auto wrappedField = optField.field();
    TS_ASSERT_EQUALS(wrappedField.kind(), commsdsl::parse::ParseField::Kind::Int);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "!=");
    TS_ASSERT_EQUALS(exprCond.right(), "$Mem2");
}

void OptionalTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), ">=");
    TS_ASSERT_EQUALS(exprCond.right(), "Enum1.V2");
}

void OptionalTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Enum1");
    TS_ASSERT_EQUALS(exprCond.op(), "<=");
    TS_ASSERT_EQUALS(exprCond.right(), "2");
}

void OptionalTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Enum1");
    TS_ASSERT_EQUALS(exprCond.op(), "<=");
    TS_ASSERT_EQUALS(exprCond.right(), "V2");
}

void OptionalTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "!=");
    TS_ASSERT_EQUALS(exprCond.right(), "S1");
}

void OptionalTestSuite::test13()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Ref);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "<");
    TS_ASSERT_EQUALS(exprCond.right(), "S1");
}

void OptionalTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 5U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Float);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "=");
    TS_ASSERT_EQUALS(exprCond.right(), "Nan");
}

void OptionalTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 12U);
    TS_ASSERT_EQUALS(field.maxLength(), 13U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Float);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Float);
    TS_ASSERT_EQUALS(mem3.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem3);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), "!=");
    TS_ASSERT_EQUALS(exprCond.right(), "$Mem2");
}

void OptionalTestSuite::test17()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 5U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Float);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$Mem1");
    TS_ASSERT_EQUALS(exprCond.op(), ">");
    TS_ASSERT_EQUALS(exprCond.right(), "3.5");
}

void OptionalTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 8U);
    TS_ASSERT_EQUALS(field.maxLength(), 9U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Float);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem3.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem3);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::List);
    commsdsl::parse::ParseOptCondList listCond(cond);
    TS_ASSERT_EQUALS(listCond.type(), commsdsl::parse::ParseOptCondList::Type::And);
    auto conditions = listCond.conditions();
    TS_ASSERT_EQUALS(conditions.size(), 2U);
    auto& cond1 = conditions[0];
    auto& cond2 = conditions[1];
    TS_ASSERT_EQUALS(cond1.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    TS_ASSERT_EQUALS(cond2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr expr1(cond1);
    TS_ASSERT_EQUALS(expr1.left(), "$Mem1");
    TS_ASSERT_EQUALS(expr1.op(), "=");
    TS_ASSERT_EQUALS(expr1.right(), "NAN");
    commsdsl::parse::ParseOptCondExpr expr2(cond2);
    TS_ASSERT_EQUALS(expr2.left(), "$Mem2");
    TS_ASSERT_EQUALS(expr2.op(), "!=");
    TS_ASSERT_EQUALS(expr2.right(), "0");
}

void OptionalTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem2);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::List);
    commsdsl::parse::ParseOptCondList listCond(cond);
    TS_ASSERT_EQUALS(listCond.type(), commsdsl::parse::ParseOptCondList::Type::Or);
    auto conditions = listCond.conditions();
    TS_ASSERT_EQUALS(conditions.size(), 2U);
    auto& cond1 = conditions[0];
    auto& cond2 = conditions[1];
    TS_ASSERT_EQUALS(cond1.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    TS_ASSERT_EQUALS(cond2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr expr1(cond1);
    TS_ASSERT(expr1.left().empty());
    TS_ASSERT(expr1.op().empty());
    TS_ASSERT_EQUALS(expr1.right(), "$Set1.b0");
    commsdsl::parse::ParseOptCondExpr expr2(cond2);
    TS_ASSERT(expr2.left().empty());
    TS_ASSERT_EQUALS(expr2.op(), "!");
    TS_ASSERT_EQUALS(expr2.right(), "$Set1.b1");
}

void OptionalTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 2U);
    TS_ASSERT_EQUALS(field.maxLength(), 3U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem3.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField optField(mem3);
    auto cond = optField.cond();
    TS_ASSERT(optField.cond().valid());
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::List);
    commsdsl::parse::ParseOptCondList listCond(cond);
    TS_ASSERT_EQUALS(listCond.type(), commsdsl::parse::ParseOptCondList::Type::And);
    auto conditions = listCond.conditions();
    TS_ASSERT_EQUALS(conditions.size(), 2U);
    auto& cond1 = conditions[0];
    auto& cond2 = conditions[1];
    TS_ASSERT_EQUALS(cond1.kind(), commsdsl::parse::ParseOptCond::Kind::List);
    TS_ASSERT_EQUALS(cond2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondList listCond2(cond1);
    TS_ASSERT_EQUALS(listCond2.type(), commsdsl::parse::ParseOptCondList::Type::Or);
    auto subConditions = listCond2.conditions();
    auto& subCond1 = subConditions[0];
    auto& subCond2 = subConditions[1];
    commsdsl::parse::ParseOptCondExpr expr1(subCond1);
    TS_ASSERT(expr1.left().empty());
    TS_ASSERT(expr1.op().empty());
    TS_ASSERT_EQUALS(expr1.right(), "$Set1.b0");
    commsdsl::parse::ParseOptCondExpr expr2(subCond2);
    TS_ASSERT(expr2.left().empty());
    TS_ASSERT_EQUALS(expr2.op(), "!");
    TS_ASSERT_EQUALS(expr2.right(), "$Set1.b1");
    commsdsl::parse::ParseOptCondExpr expr3(cond2);
    TS_ASSERT_EQUALS(expr3.left(), "$I1");
    TS_ASSERT_EQUALS(expr3.op(), "=");
    TS_ASSERT_EQUALS(expr3.right(), "0");
}

void OptionalTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "Bundle1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 2U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.members();
    TS_ASSERT_EQUALS(members.size(), 2U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];

    TS_ASSERT_EQUALS(mem1.kind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField opt(mem2);
    auto cond = opt.cond();
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT(exprCond.left().empty());
    TS_ASSERT_EQUALS(exprCond.op(), "!");
    TS_ASSERT_EQUALS(exprCond.right(), "$Set1.b0");

    auto optField = opt.field();
    TS_ASSERT_EQUALS(optField.kind(), commsdsl::parse::ParseField::Kind::Ref);
}

void OptionalTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test24()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test25()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test27()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test28()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test29()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg = messages.front();
    TS_ASSERT_EQUALS(msg.name(), "M1");

    auto fields = msg.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);
    auto& f1 = fields[0];
    auto& f2 = fields[1];

    TS_ASSERT_EQUALS(f1.kind(), commsdsl::parse::ParseField::Kind::Ref);
    TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField opt(f2);
    auto cond = opt.cond();
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT(exprCond.left().empty());
    TS_ASSERT(exprCond.op().empty());
    TS_ASSERT_EQUALS(exprCond.right(), "$S1.B0");

    auto optField = opt.field();
    TS_ASSERT_EQUALS(optField.kind(), commsdsl::parse::ParseField::Kind::Int);
}

void OptionalTestSuite::test30()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg = messages.front();
    TS_ASSERT_EQUALS(msg.name(), "M1");

    auto fields = msg.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);
    auto& f1 = fields[0];
    auto& f2 = fields[1];

    TS_ASSERT_EQUALS(f1.kind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);

    commsdsl::parse::ParseOptionalField opt(f2);
    auto cond = opt.cond();
    TS_ASSERT_EQUALS(cond.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr exprCond(cond);
    TS_ASSERT_EQUALS(exprCond.left(), "$B1");
    TS_ASSERT_EQUALS(exprCond.op(), "!=");
    TS_ASSERT_EQUALS(exprCond.right(), "0");

    auto optField = opt.field();
    TS_ASSERT_EQUALS(optField.kind(), commsdsl::parse::ParseField::Kind::String);
}

void OptionalTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    do {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& o1 = fields[0];
        TS_ASSERT_EQUALS(o1.kind(), commsdsl::parse::ParseField::Kind::Optional);

        commsdsl::parse::ParseOptionalField opt(o1);
        TS_ASSERT(opt.missingOnReadFail());
        TS_ASSERT(!opt.missingOnInvalid());
    } while (false);

    do {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& o2 = fields[1];
        TS_ASSERT_EQUALS(o2.kind(), commsdsl::parse::ParseField::Kind::Optional);

        commsdsl::parse::ParseOptionalField opt(o2);
        TS_ASSERT(!opt.missingOnReadFail());
        TS_ASSERT(opt.missingOnInvalid());
    } while (false);

}

void OptionalTestSuite::test32()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test33()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema33.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& m1 = messages.front();
    auto fields = m1.fields();

    auto& o1 = fields[1];
    TS_ASSERT_EQUALS(o1.kind(), commsdsl::parse::ParseField::Kind::Optional);
}

void OptionalTestSuite::test34()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema34.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test35()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema35.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test36()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema36.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& m1 = messages[0];
    auto fields = m1.fields();

    auto& o1 = fields[0];
    TS_ASSERT_EQUALS(o1.kind(), commsdsl::parse::ParseField::Kind::Optional);    

    commsdsl::parse::ParseOptionalField optField(o1);
    auto cond1 = optField.cond();
    TS_ASSERT_EQUALS(cond1.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr expr1(cond1);
    TS_ASSERT(expr1.left().empty());
    TS_ASSERT(expr1.op().empty());
    TS_ASSERT_EQUALS(expr1.right(), "%Flags.B0");

    auto& m2 = messages[1];
    auto m2_fields = m2.fields();
    TS_ASSERT_EQUALS(m2_fields.size(), 2U);

    auto& m2_o2 = m2_fields[1];
    TS_ASSERT_EQUALS(m2_o2.kind(), commsdsl::parse::ParseField::Kind::Optional);    

    commsdsl::parse::ParseOptionalField m2_o2_optField(m2_o2);
    auto m2_cond2 = m2_o2_optField.cond();
    TS_ASSERT_EQUALS(m2_cond2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    commsdsl::parse::ParseOptCondExpr m2_expr2(m2_cond2);
    TS_ASSERT_EQUALS(m2_expr2.left(), "%Bundle.M0");
    TS_ASSERT_EQUALS(m2_expr2.op(), "<");
    TS_ASSERT_EQUALS(m2_expr2.right(), "%Bundle.M1");    
}

void OptionalTestSuite::test37()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema37.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test38()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema38.xml");
    TS_ASSERT(protocol);
}


void OptionalTestSuite::test39()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema39.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& m1 = messages[0];
    auto fields = m1.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& f2 = fields[1];
    TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);    
}

void OptionalTestSuite::test40()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema40.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& m1 = messages[0];
    auto fields = m1.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& f2 = fields[1];
    TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);    

    auto& f3 = fields[2];
    TS_ASSERT_EQUALS(f3.kind(), commsdsl::parse::ParseField::Kind::Optional);    
}

void OptionalTestSuite::test41()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema41.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test42()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema42.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();

    do {
        TS_ASSERT_LESS_THAN_EQUALS(1U, messages.size());
        auto& m1 = messages[0];
        auto fields = m1.fields();
        TS_ASSERT_LESS_THAN_EQUALS(3U, fields.size());

        auto& f2 = fields[1];
        TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);    

        commsdsl::parse::ParseOptionalField optF2(f2);
        auto condF2 = optF2.cond();

        TS_ASSERT_EQUALS(condF2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
        commsdsl::parse::ParseOptCondExpr exprCondF2(condF2);

        auto exprCondF2LeftInfo = exprCondF2.leftInfo();
        auto exprCondF2RightInfo = exprCondF2.rightInfo();
        TS_ASSERT_EQUALS(exprCondF2LeftInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::SiblingRef);
        TS_ASSERT_EQUALS(exprCondF2LeftInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Size);
        TS_ASSERT_EQUALS(exprCondF2LeftInfo.m_access, "F1");

        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::Value);
        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Itself);
        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_access, "0");        

        auto& f3 = fields[2];
        TS_ASSERT_EQUALS(f3.kind(), commsdsl::parse::ParseField::Kind::Optional);    
        TS_ASSERT_EQUALS(f3.name(), "F3");    

        commsdsl::parse::ParseOptionalField optF3(f3);
        auto condF3 = optF3.cond();

        TS_ASSERT_EQUALS(condF3.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
        commsdsl::parse::ParseOptCondExpr exprCondF3(condF3);

        auto exprCondF3LeftInfo = exprCondF3.leftInfo();
        auto exprCondF3RightInfo = exprCondF3.rightInfo();
        TS_ASSERT_EQUALS(exprCondF3LeftInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::Invalid);
        TS_ASSERT_EQUALS(exprCondF3LeftInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Itself);
        TS_ASSERT(exprCondF3LeftInfo.m_access.empty());

        TS_ASSERT_EQUALS(exprCondF3RightInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::SiblingRef);
        TS_ASSERT_EQUALS(exprCondF3RightInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Exists);
        TS_ASSERT_EQUALS(exprCondF3RightInfo.m_access, "F2");        

    } while (false);

    do {
        TS_ASSERT_LESS_THAN_EQUALS(2U, messages.size());
        auto& m2 = messages[1];
        auto fields = m2.fields();
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& f2 = fields[1];
        TS_ASSERT_EQUALS(f2.kind(), commsdsl::parse::ParseField::Kind::Optional);    

        commsdsl::parse::ParseOptionalField optF2(f2);
        auto condF2 = optF2.cond();

        TS_ASSERT_EQUALS(condF2.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
        commsdsl::parse::ParseOptCondExpr exprCondF2(condF2);

        auto exprCondF2LeftInfo = exprCondF2.leftInfo();
        auto exprCondF2RightInfo = exprCondF2.rightInfo();
        TS_ASSERT_EQUALS(exprCondF2LeftInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::Invalid);
        TS_ASSERT_EQUALS(exprCondF2LeftInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Itself);
        TS_ASSERT(exprCondF2LeftInfo.m_access.empty());


        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::SiblingRef);
        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Exists);
        TS_ASSERT_EQUALS(exprCondF2RightInfo.m_access, "F1");        
    } while (false);   

    do {
        TS_ASSERT_LESS_THAN_EQUALS(3U, messages.size());
        auto& m3 = messages[2];
        auto fields = m3.fields();
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& f1 = fields[0];
        TS_ASSERT_EQUALS(f1.kind(), commsdsl::parse::ParseField::Kind::Optional);    

        commsdsl::parse::ParseOptionalField optF1(f1);
        auto condF1 = optF1.cond();

        TS_ASSERT_EQUALS(condF1.kind(), commsdsl::parse::ParseOptCond::Kind::Expr);
        commsdsl::parse::ParseOptCondExpr exprCondF1(condF1);

        auto exprCondF1LeftInfo = exprCondF1.leftInfo();
        auto exprCondF1RightInfo = exprCondF1.rightInfo();
        TS_ASSERT_EQUALS(exprCondF1LeftInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::InterfaceRef);
        TS_ASSERT_EQUALS(exprCondF1LeftInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Size);
        TS_ASSERT_EQUALS(exprCondF1LeftInfo.m_access, "Data");

        TS_ASSERT_EQUALS(exprCondF1RightInfo.m_type, commsdsl::parse::ParseOptCondExpr::OperandType::Value);
        TS_ASSERT_EQUALS(exprCondF1RightInfo.m_mode, commsdsl::parse::ParseOptCondExpr::AccMode::Itself);
        TS_ASSERT_EQUALS(exprCondF1RightInfo.m_access, "1");       
    } while (false);        
}

void OptionalTestSuite::test43()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema43.xml");
    TS_ASSERT(protocol);
}

void OptionalTestSuite::test44()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema44.xml");
    TS_ASSERT(protocol);
}
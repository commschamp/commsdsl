#include <limits>

#include "CommonTestSuite.h"

class MessageTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();
    void test31();
    void test32();
};

void MessageTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void MessageTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void MessageTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 16);
    TS_ASSERT(msg1.fields().empty());
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 10);
    TS_ASSERT(msg2.fields().empty());
    TS_ASSERT_EQUALS(msg2.minLength(), 0U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 0U);
}

void MessageTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);
    auto& f1 = fields[0];
    TS_ASSERT_EQUALS(f1.semanticType(), commsdsl::parse::Field::SemanticType::MessageId);

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 4U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 1U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 8U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 8U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 3U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    auto& msg3 = messages[2];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 4U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 0U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg2.id(), 1);
    TS_ASSERT_EQUALS(msg2.minLength(), 6U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 6U);
    TS_ASSERT_EQUALS(msg2.sinceVersion(), 2U);
    TS_ASSERT(msg2.copyCodeFrom().empty());
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);

    TS_ASSERT_EQUALS(msg3.name(), "Msg3");
    TS_ASSERT_EQUALS(msg3.id(), 2);
    TS_ASSERT_EQUALS(msg3.copyCodeFrom(), "Msg2");
    auto fields3 = msg3.fields();
    TS_ASSERT_EQUALS(fields3.size(), 3U);   

    TS_ASSERT_EQUALS(fields3[1].kind(), commsdsl::parse::Field::Kind::Enum); 
}

void MessageTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0);
    TS_ASSERT_EQUALS(msg1.minLength(), 8U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.sinceVersion(), 2U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);
    TS_ASSERT_EQUALS(fields1[0].sinceVersion(), 2U);
}

void MessageTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test8()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1_1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 8U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 8U);
    auto fields1 = msg1.fields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.name(), "Msg1_2");
    TS_ASSERT_EQUALS(msg2.id(), msg1.id());
    TS_ASSERT_EQUALS(msg2.order(), 1U);
    TS_ASSERT_EQUALS(msg2.minLength(), 6U);
    TS_ASSERT_EQUALS(msg2.maxLength(), 6U);
    auto fields2 = msg2.fields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    auto& extraAttrs = msg1.extraAttributes();
    auto& extraChildren = msg1.extraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test13()
{
    m_status.m_preValidateFunc =
        [](commsdsl::parse::Protocol& p)
        {
            p.addExpectedExtraPrefix("prefix.");
        };

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    auto& extraAttrs = msg1.extraAttributes();
    auto& extraChildren = msg1.extraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "prefix.extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg1.id(), 0U);
    TS_ASSERT_EQUALS(msg1.order(), 0U);
    TS_ASSERT_EQUALS(msg1.minLength(), 0U);
    TS_ASSERT_EQUALS(msg1.maxLength(), 0U);
    TS_ASSERT(msg1.fields().empty());
    TS_ASSERT_EQUALS(msg1.description(), "This is multiline description");
}

void MessageTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg2.name(), "Msg2");

    auto& platforms1 = msg1.platforms();
    auto& platforms2 = msg2.platforms();

    TS_ASSERT_EQUALS(platforms1.size(), 2U);
    TS_ASSERT_EQUALS(platforms1[0], "p1");
    TS_ASSERT_EQUALS(platforms1[1], "p3");

    TS_ASSERT_EQUALS(platforms2.size(), 1U);
    TS_ASSERT_EQUALS(platforms2[0], "p3");
}

void MessageTestSuite::test16()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 4U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    auto& msg3 = messages[2];
    auto& msg4 = messages[3];
    TS_ASSERT_EQUALS(msg1.name(), "Msg1");
    TS_ASSERT_EQUALS(msg2.name(), "Msg2");
    TS_ASSERT_EQUALS(msg3.name(), "Msg3");
    TS_ASSERT_EQUALS(msg4.name(), "Msg4");

    TS_ASSERT_EQUALS(msg1.sender(), commsdsl::parse::Message::Sender::Both);
    TS_ASSERT(!msg1.isCustomizable());

    TS_ASSERT_EQUALS(msg2.sender(), commsdsl::parse::Message::Sender::Both);
    TS_ASSERT(!msg2.isCustomizable());

    TS_ASSERT_EQUALS(msg3.sender(), commsdsl::parse::Message::Sender::Client);
    TS_ASSERT(msg3.isCustomizable());

    TS_ASSERT_EQUALS(msg4.sender(), commsdsl::parse::Message::Sender::Server);
    TS_ASSERT(!msg1.isCustomizable());
}

void MessageTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.displayName(), "Message 1");
    TS_ASSERT_EQUALS(msg2.displayName(), "Message 2");
}

void MessageTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.displayName(), "^Msg1Name");
    TS_ASSERT_EQUALS(msg2.displayName(), "^Msg2Name");
}

void MessageTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.construct();
    TS_ASSERT_EQUALS(msg1Construct.kind(), commsdsl::parse::OptCond::Kind::Expr);
    commsdsl::parse::OptCondExpr msg1ConstructExpr(msg1Construct);
    TS_ASSERT(msg1ConstructExpr.left().empty());
    TS_ASSERT(msg1ConstructExpr.op().empty());
    TS_ASSERT_EQUALS(msg1ConstructExpr.right(), "%Flags.M1.B0");


    auto& msg2 = messages[1];
    auto msg2Construct = msg2.construct();
    TS_ASSERT_EQUALS(msg2Construct.kind(), commsdsl::parse::OptCond::Kind::List);
    commsdsl::parse::OptCondList msg2ConstructExpr(msg2Construct);
    TS_ASSERT_EQUALS(msg2ConstructExpr.type(), commsdsl::parse::OptCondList::Type::And);
}

void MessageTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test24()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test25()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto msg1ReadCond = msg1.readCond();
    TS_ASSERT_EQUALS(msg1ReadCond.kind(), commsdsl::parse::OptCond::Kind::Expr);
    commsdsl::parse::OptCondExpr msg1ReadCondExpr(msg1ReadCond);
    TS_ASSERT(msg1ReadCondExpr.left().empty());
    TS_ASSERT(msg1ReadCondExpr.op().empty());
    TS_ASSERT_EQUALS(msg1ReadCondExpr.right(), "%Flags.M1.B0");


    auto& msg2 = messages[1];
    auto msg2ReadCond = msg2.readCond();
    TS_ASSERT_EQUALS(msg2ReadCond.kind(), commsdsl::parse::OptCond::Kind::List);
    commsdsl::parse::OptCondList msg2ReadCondExpr(msg2ReadCond);
    TS_ASSERT_EQUALS(msg2ReadCondExpr.type(), commsdsl::parse::OptCondList::Type::And);
}

void MessageTestSuite::test27()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.construct();
    TS_ASSERT_EQUALS(msg1Construct.kind(), commsdsl::parse::OptCond::Kind::Expr);
    auto msg1ReadCond = msg1.readCond();
    TS_ASSERT_EQUALS(msg1ReadCond.kind(), commsdsl::parse::OptCond::Kind::Expr);
}

void MessageTestSuite::test28()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.construct();
    TS_ASSERT_EQUALS(msg1Construct.kind(), commsdsl::parse::OptCond::Kind::Expr);
    auto msg1ValidCond = msg1.validCond();
    TS_ASSERT_EQUALS(msg1ValidCond.kind(), commsdsl::parse::OptCond::Kind::Expr);
}

void MessageTestSuite::test29()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test30()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.construct();
    TS_ASSERT_EQUALS(msg1Construct.kind(), commsdsl::parse::OptCond::Kind::Expr);
    auto msg1ValidCond = msg1.validCond();
    TS_ASSERT_EQUALS(msg1ValidCond.kind(), commsdsl::parse::OptCond::Kind::Expr);
    auto msg1ReadCond = msg1.readCond();
    TS_ASSERT_EQUALS(msg1ReadCond.kind(), commsdsl::parse::OptCond::Kind::Expr);
}


void MessageTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT(msg1.isFailOnInvalid());
    auto msg1ValidCond = msg1.validCond();
    TS_ASSERT_EQUALS(msg1ValidCond.kind(), commsdsl::parse::OptCond::Kind::List);
}

void MessageTestSuite::test32()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, messages.size());

        auto& msg1 = messages[0];
        TS_ASSERT(msg1.isFailOnInvalid());
        TS_ASSERT_EQUALS(msg1.fields().size(), 2U);
        auto validCond = msg1.validCond();
        TS_ASSERT_EQUALS(validCond.kind(), commsdsl::parse::OptCond::Kind::List);
    }
    
    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, messages.size());

        auto& msg2 = messages[1];
        TS_ASSERT(msg2.isFailOnInvalid());
        TS_ASSERT_EQUALS(msg2.fields().size(), 3U);
        TS_ASSERT_EQUALS(msg2.copyCodeFrom(), "Msg1");
        auto validCond = msg2.validCond();
        TS_ASSERT_EQUALS(validCond.kind(), commsdsl::parse::OptCond::Kind::List);
    }    

    {
        TS_ASSERT_LESS_THAN_EQUALS(3U, messages.size());

        auto& msg3 = messages[2];
        TS_ASSERT_EQUALS(msg3.name(), "Msg3");
        auto constructCond = msg3.construct();
        TS_ASSERT(constructCond.valid());
        TS_ASSERT_EQUALS(constructCond.kind(), commsdsl::parse::OptCond::Kind::List);

        auto validCond = msg3.validCond();
        TS_ASSERT(validCond.valid());
        TS_ASSERT_EQUALS(validCond.kind(), commsdsl::parse::OptCond::Kind::List);

        auto readCond = msg3.validCond();
        TS_ASSERT(readCond.valid());
        TS_ASSERT_EQUALS(readCond.kind(), commsdsl::parse::OptCond::Kind::List);        
    }     

    {
        TS_ASSERT_LESS_THAN_EQUALS(4U, messages.size());

        auto& msg4 = messages[3];
        TS_ASSERT_EQUALS(msg4.name(), "Msg4");
        auto constructCond = msg4.construct();
        TS_ASSERT(constructCond.valid());
        TS_ASSERT_EQUALS(constructCond.kind(), commsdsl::parse::OptCond::Kind::Expr);

        auto validCond = msg4.validCond();
        TS_ASSERT(validCond.valid());
        TS_ASSERT_EQUALS(validCond.kind(), commsdsl::parse::OptCond::Kind::Expr);

        auto readCond = msg4.readCond();
        TS_ASSERT(readCond.valid());
        TS_ASSERT_EQUALS(readCond.kind(), commsdsl::parse::OptCond::Kind::List);        
    }     
}
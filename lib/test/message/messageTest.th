#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseMessage.h"

class MessageTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();
    void test31();
    void test32();
    void test33();
};

void MessageTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void MessageTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void MessageTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 16);
    TS_ASSERT(msg1.parseFields().empty());
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 0U);

    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");
    TS_ASSERT_EQUALS(msg2.parseId(), 10);
    TS_ASSERT(msg2.parseFields().empty());
    TS_ASSERT_EQUALS(msg2.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(msg2.parseMaxLength(), 0U);
}

void MessageTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);
    auto& f1 = fields[0];
    TS_ASSERT_EQUALS(f1.parseSemanticType(), commsdsl::parse::ParseField::ParseSemanticType::MessageId);

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 4U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 4U);
    auto fields1 = msg1.parseFields();
    TS_ASSERT_EQUALS(fields1.size(), 1U);

    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");
    TS_ASSERT_EQUALS(msg2.parseId(), 1);
    TS_ASSERT_EQUALS(msg2.parseMinLength(), 8U);
    TS_ASSERT_EQUALS(msg2.parseMaxLength(), 8U);
    auto fields2 = msg2.parseFields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 3U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    auto& msg3 = messages[2];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 4U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.parseSinceVersion(), 0U);
    auto fields1 = msg1.parseFields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");
    TS_ASSERT_EQUALS(msg2.parseId(), 1);
    TS_ASSERT_EQUALS(msg2.parseMinLength(), 6U);
    TS_ASSERT_EQUALS(msg2.parseMaxLength(), 6U);
    TS_ASSERT_EQUALS(msg2.parseSinceVersion(), 2U);
    TS_ASSERT(msg2.parseCopyCodeFrom().empty());
    auto fields2 = msg2.parseFields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);

    TS_ASSERT_EQUALS(msg3.parseName(), "Msg3");
    TS_ASSERT_EQUALS(msg3.parseId(), 2);
    TS_ASSERT_EQUALS(msg3.parseCopyCodeFrom(), "Msg2");
    auto fields3 = msg3.parseFields();
    TS_ASSERT_EQUALS(fields3.size(), 3U);   

    TS_ASSERT_EQUALS(fields3[1].parseKind(), commsdsl::parse::ParseField::ParseKind::Enum); 
}

void MessageTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 8U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 8U);
    TS_ASSERT_EQUALS(msg1.parseSinceVersion(), 2U);
    auto fields1 = msg1.parseFields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);
    TS_ASSERT_EQUALS(fields1[0].parseSinceVersion(), 2U);
}

void MessageTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test8()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1_1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0U);
    TS_ASSERT_EQUALS(msg1.parseOrder(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 8U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 8U);
    auto fields1 = msg1.parseFields();
    TS_ASSERT_EQUALS(fields1.size(), 2U);

    TS_ASSERT_EQUALS(msg2.parseName(), "Msg1_2");
    TS_ASSERT_EQUALS(msg2.parseId(), msg1.parseId());
    TS_ASSERT_EQUALS(msg2.parseOrder(), 1U);
    TS_ASSERT_EQUALS(msg2.parseMinLength(), 6U);
    TS_ASSERT_EQUALS(msg2.parseMaxLength(), 6U);
    auto fields2 = msg2.parseFields();
    TS_ASSERT_EQUALS(fields2.size(), 2U);
}

void MessageTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0U);
    TS_ASSERT_EQUALS(msg1.parseOrder(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 0U);
    TS_ASSERT(msg1.parseFields().empty());
    auto& extraAttrs = msg1.parseExtraAttributes();
    auto& extraChildren = msg1.parseExtraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test13()
{
    m_status.m_preValidateFunc =
        [](commsdsl::parse::ParseProtocol& p)
        {
            p.parseAddExpectedExtraPrefix("prefix.");
        };

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0U);
    TS_ASSERT_EQUALS(msg1.parseOrder(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 0U);
    TS_ASSERT(msg1.parseFields().empty());
    auto& extraAttrs = msg1.parseExtraAttributes();
    auto& extraChildren = msg1.parseExtraElements();

    TS_ASSERT_EQUALS(extraAttrs.size(), 1);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "prefix.extraAttr");
    TS_ASSERT_EQUALS(extraAttrs.begin()->second, "hello");

    TS_ASSERT_EQUALS(extraChildren.size(), 1);
    TS_TRACE(extraChildren.front());
}

void MessageTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg1.parseId(), 0U);
    TS_ASSERT_EQUALS(msg1.parseOrder(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(msg1.parseMaxLength(), 0U);
    TS_ASSERT(msg1.parseFields().empty());
    TS_ASSERT_EQUALS(msg1.parseDescription(), "This is multiline description");
}

void MessageTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");

    auto& platforms1 = msg1.parsePlatforms();
    auto& platforms2 = msg2.parsePlatforms();

    TS_ASSERT_EQUALS(platforms1.size(), 2U);
    TS_ASSERT_EQUALS(platforms1[0], "p1");
    TS_ASSERT_EQUALS(platforms1[1], "p3");

    TS_ASSERT_EQUALS(platforms2.size(), 1U);
    TS_ASSERT_EQUALS(platforms2[0], "p3");
}

void MessageTestSuite::test16()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 4U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    auto& msg3 = messages[2];
    auto& msg4 = messages[3];
    TS_ASSERT_EQUALS(msg1.parseName(), "Msg1");
    TS_ASSERT_EQUALS(msg2.parseName(), "Msg2");
    TS_ASSERT_EQUALS(msg3.parseName(), "Msg3");
    TS_ASSERT_EQUALS(msg4.parseName(), "Msg4");

    TS_ASSERT_EQUALS(msg1.parseSender(), commsdsl::parse::ParseMessage::ParseSender::Both);
    TS_ASSERT(!msg1.parseIsCustomizable());

    TS_ASSERT_EQUALS(msg2.parseSender(), commsdsl::parse::ParseMessage::ParseSender::Both);
    TS_ASSERT(!msg2.parseIsCustomizable());

    TS_ASSERT_EQUALS(msg3.parseSender(), commsdsl::parse::ParseMessage::ParseSender::Client);
    TS_ASSERT(msg3.parseIsCustomizable());

    TS_ASSERT_EQUALS(msg4.parseSender(), commsdsl::parse::ParseMessage::ParseSender::Server);
    TS_ASSERT(!msg1.parseIsCustomizable());
}

void MessageTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseDisplayName(), "Message 1");
    TS_ASSERT_EQUALS(msg2.parseDisplayName(), "Message 2");
}

void MessageTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto& msg2 = messages[1];
    TS_ASSERT_EQUALS(msg1.parseDisplayName(), "^Msg1Name");
    TS_ASSERT_EQUALS(msg2.parseDisplayName(), "^Msg2Name");
}

void MessageTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.parseConstruct();
    TS_ASSERT_EQUALS(msg1Construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    commsdsl::parse::ParseOptCondExpr msg1ConstructExpr(msg1Construct);
    TS_ASSERT(msg1ConstructExpr.parseLeft().empty());
    TS_ASSERT(msg1ConstructExpr.parseOp().empty());
    TS_ASSERT_EQUALS(msg1ConstructExpr.parseRight(), "%Flags.M1.B0");


    auto& msg2 = messages[1];
    auto msg2Construct = msg2.parseConstruct();
    TS_ASSERT_EQUALS(msg2Construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);
    commsdsl::parse::ParseOptCondList msg2ConstructExpr(msg2Construct);
    TS_ASSERT_EQUALS(msg2ConstructExpr.parseType(), commsdsl::parse::ParseOptCondList::ParseType::And);
}

void MessageTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test24()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test25()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 2U);

    auto& msg1 = messages[0];
    auto msg1ReadCond = msg1.parseReadCond();
    TS_ASSERT_EQUALS(msg1ReadCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    commsdsl::parse::ParseOptCondExpr msg1ReadCondExpr(msg1ReadCond);
    TS_ASSERT(msg1ReadCondExpr.parseLeft().empty());
    TS_ASSERT(msg1ReadCondExpr.parseOp().empty());
    TS_ASSERT_EQUALS(msg1ReadCondExpr.parseRight(), "%Flags.M1.B0");


    auto& msg2 = messages[1];
    auto msg2ReadCond = msg2.parseReadCond();
    TS_ASSERT_EQUALS(msg2ReadCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);
    commsdsl::parse::ParseOptCondList msg2ReadCondExpr(msg2ReadCond);
    TS_ASSERT_EQUALS(msg2ReadCondExpr.parseType(), commsdsl::parse::ParseOptCondList::ParseType::And);
}

void MessageTestSuite::test27()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.parseConstruct();
    TS_ASSERT_EQUALS(msg1Construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    auto msg1ReadCond = msg1.parseReadCond();
    TS_ASSERT_EQUALS(msg1ReadCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
}

void MessageTestSuite::test28()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.parseConstruct();
    TS_ASSERT_EQUALS(msg1Construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    auto msg1ValidCond = msg1.parseValidCond();
    TS_ASSERT_EQUALS(msg1ValidCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
}

void MessageTestSuite::test29()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
}

void MessageTestSuite::test30()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    auto msg1Construct = msg1.parseConstruct();
    TS_ASSERT_EQUALS(msg1Construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    auto msg1ValidCond = msg1.parseValidCond();
    TS_ASSERT_EQUALS(msg1ValidCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
    auto msg1ReadCond = msg1.parseReadCond();
    TS_ASSERT_EQUALS(msg1ReadCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);
}


void MessageTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg1 = messages[0];
    TS_ASSERT(msg1.parseIsFailOnInvalid());
    auto msg1ValidCond = msg1.parseValidCond();
    TS_ASSERT_EQUALS(msg1ValidCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);
}

void MessageTestSuite::test32()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, messages.size());

        auto& msg1 = messages[0];
        TS_ASSERT(msg1.parseIsFailOnInvalid());
        TS_ASSERT_EQUALS(msg1.parseFields().size(), 2U);
        auto validCond = msg1.parseValidCond();
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);
    }
    
    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, messages.size());

        auto& msg2 = messages[1];
        TS_ASSERT(msg2.parseIsFailOnInvalid());
        TS_ASSERT_EQUALS(msg2.parseFields().size(), 3U);
        TS_ASSERT_EQUALS(msg2.parseCopyCodeFrom(), "Msg1");
        auto validCond = msg2.parseValidCond();
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);
    }    

    {
        TS_ASSERT_LESS_THAN_EQUALS(3U, messages.size());

        auto& msg3 = messages[2];
        TS_ASSERT_EQUALS(msg3.parseName(), "Msg3");
        auto constructCond = msg3.parseConstruct();
        TS_ASSERT(constructCond.parseValid());
        TS_ASSERT_EQUALS(constructCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);

        auto validCond = msg3.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);

        auto readCond = msg3.parseValidCond();
        TS_ASSERT(readCond.parseValid());
        TS_ASSERT_EQUALS(readCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);        
    }     

    {
        TS_ASSERT_LESS_THAN_EQUALS(4U, messages.size());

        auto& msg4 = messages[3];
        TS_ASSERT_EQUALS(msg4.parseName(), "Msg4");
        auto constructCond = msg4.parseConstruct();
        TS_ASSERT(constructCond.parseValid());
        TS_ASSERT_EQUALS(constructCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);

        auto validCond = msg4.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::Expr);

        auto readCond = msg4.parseReadCond();
        TS_ASSERT(readCond.parseValid());
        TS_ASSERT_EQUALS(readCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);        
    }     
}

void MessageTestSuite::test33()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema33.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto messages = ns.parseMessages();
    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, messages.size());

        auto& msg = messages[0];
        auto construct = msg.parseConstruct();
        TS_ASSERT(construct.parseValid());
        TS_ASSERT_EQUALS(construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);

        auto readCond = msg.parseReadCond();
        TS_ASSERT(readCond.parseValid());
        TS_ASSERT_EQUALS(readCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);   

        auto validCond = msg.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);             
    }
    
    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, messages.size());

        auto& msg = messages[1];
        auto construct = msg.parseConstruct();
        TS_ASSERT(construct.parseValid());
        TS_ASSERT_EQUALS(construct.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);

        auto readCond = msg.parseReadCond();
        TS_ASSERT(!readCond.parseValid());

        auto validCond = msg.parseValidCond();
        TS_ASSERT(!validCond.parseValid());
    }    

    {
        TS_ASSERT_LESS_THAN_EQUALS(3U, messages.size());

        auto& msg = messages[2];
        auto construct = msg.parseConstruct();
        TS_ASSERT(!construct.parseValid());

        auto readCond = msg.parseReadCond();
        TS_ASSERT(readCond.parseValid());
        TS_ASSERT_EQUALS(readCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);   

        auto validCond = msg.parseValidCond();
        TS_ASSERT(!validCond.parseValid());
    }     

    {
        TS_ASSERT_LESS_THAN_EQUALS(4U, messages.size());

        auto& msg = messages[3];
        auto construct = msg.parseConstruct();
        TS_ASSERT(!construct.parseValid());

        auto readCond = msg.parseReadCond();
        TS_ASSERT(!readCond.parseValid());

        auto validCond = msg.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);          
    }    

    {
        TS_ASSERT_LESS_THAN_EQUALS(5U, messages.size());

        auto& msg = messages[4];
        auto construct = msg.parseConstruct();
        TS_ASSERT(!construct.parseValid());

        auto readCond = msg.parseReadCond();
        TS_ASSERT(!readCond.parseValid());

        auto validCond = msg.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::ParseKind::List);          
    }      
}
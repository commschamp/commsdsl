#include <limits>
#include <cfloat>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseFloatField.h"

class FloatTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();

private:
    static const double Epsilon;
};

const double FloatTestSuite::Epsilon = std::numeric_limits<double>::epsilon();

void FloatTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void FloatTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void FloatTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseDisplayName(), "Float 1");
        TS_ASSERT(field.parseDescription().empty());
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), 0.0);
        TS_ASSERT_EQUALS(floatField.parseValidCheckVersion(), false);
        TS_ASSERT(validRanges.empty());
        TS_ASSERT(specialValues.empty());
    } while (false);

    do {
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Float2");
        TS_ASSERT(field.parseDisplayName().empty());
        TS_ASSERT_EQUALS(field.parseDescription(), "Float 2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), 0.0);
        TS_ASSERT(validRanges.empty());
        TS_ASSERT(specialValues.empty());
    } while (false);
}

void FloatTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "my_ns");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT(field.parseDisplayName().empty());
        TS_ASSERT(field.parseDescription().empty());
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT(std::isnan(floatField.parseDefaultValue()));
        TS_ASSERT(validRanges.empty());
        TS_ASSERT_EQUALS(specialValues.size(), 3U);
        TS_ASSERT(std::isnan(specialValues.find("Null")->second.m_value));
        auto s1 = specialValues.find("S1")->second.m_value;
        auto s2 = specialValues.find("S2")->second.m_value;
        TS_ASSERT_LESS_THAN(s1, std::numeric_limits<double>::min());
        TS_ASSERT_LESS_THAN(std::numeric_limits<double>::max(), s2);
        TS_ASSERT(std::isinf(s1));
        TS_ASSERT(std::isinf(s2));
    } while (false);

    do {
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Float2");
        TS_ASSERT(field.parseDisplayName().empty());
        TS_ASSERT(field.parseDescription().empty());
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT(std::isinf(floatField.parseDefaultValue()));
        TS_ASSERT_LESS_THAN(std::numeric_limits<double>::max(), floatField.parseDefaultValue());
        TS_ASSERT_EQUALS(validRanges.size(), 3U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        auto& r3 = validRanges[2];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - double(std::numeric_limits<float>::lowest())), double(std::numeric_limits<float>::epsilon()));
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - double(std::numeric_limits<float>::max())), double(std::numeric_limits<float>::epsilon()));
        TS_ASSERT(std::isinf(r2.m_min));
        TS_ASSERT_EQUALS(r2.m_min, r2.m_max);
        TS_ASSERT_LESS_THAN(std::numeric_limits<double>::max(), r2.m_min);
        TS_ASSERT(std::isnan(r3.m_min));
        TS_ASSERT(std::isnan(r3.m_max));
        TS_ASSERT(specialValues.empty());
    } while (false);
}

void FloatTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 2U);

    do {
        auto& ns = namespaces[1];
        TS_ASSERT_EQUALS(ns.parseName(), "my_ns");

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT(std::isnan(floatField.parseDefaultValue()));
        TS_ASSERT_EQUALS(validRanges.size(), 2U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - (210.111)), Epsilon);
        TS_ASSERT(std::isnan(r2.m_min));
        TS_ASSERT(std::isnan(r2.m_max));
        TS_ASSERT(specialValues.empty());
    } while (false);

    do {
        auto& ns = namespaces[0];
        TS_ASSERT(ns.parseName().empty());

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT(std::isinf(floatField.parseDefaultValue()));
        TS_ASSERT_LESS_THAN(std::numeric_limits<double>::max(), floatField.parseDefaultValue());
        TS_ASSERT_EQUALS(validRanges.size(), 3U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        auto& r3 = validRanges[2];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - 220.123), std::numeric_limits<float>::epsilon());
        TS_ASSERT_LESS_THAN(std::abs(r2.m_min - 255.666), Epsilon);
        TS_ASSERT_EQUALS(r2.m_min, r2.m_max);
        TS_ASSERT(std::isinf(r3.m_min));
        TS_ASSERT_EQUALS(r3.m_min, r3.m_max);
        TS_ASSERT_LESS_THAN(std::numeric_limits<double>::max(), r3.m_min);
        TS_ASSERT(specialValues.empty());
    } while (false);
}

void FloatTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    do {
        auto& ns = namespaces.front();
        TS_ASSERT(ns.parseName().empty());

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT(std::isnan(floatField.parseDefaultValue()));
        TS_ASSERT_EQUALS(validRanges.size(), 4U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        auto& r3 = validRanges[2];
        auto& r4 = validRanges[3];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-200)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - (std::numeric_limits<double>::max())), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 1U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, 2U);
        TS_ASSERT_LESS_THAN(std::abs(r2.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r2.m_max - (210.111)), Epsilon);
        TS_ASSERT_LESS_THAN(0.0, r3.m_min);
        TS_ASSERT(std::isinf(r3.m_min));
        TS_ASSERT(std::isinf(r3.m_max));
        TS_ASSERT_EQUALS(r3.m_sinceVersion, 1U);
        TS_ASSERT_EQUALS(r3.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(std::isnan(r4.m_min));
        TS_ASSERT(std::isnan(r4.m_max));
        TS_ASSERT_EQUALS(r4.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r4.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_EQUALS(specialValues.size(), 3U);
    } while (false);
}

void FloatTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    do {
        auto& ns = namespaces.front();
        TS_ASSERT(ns.parseName().empty());

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT(std::isnan(floatField.parseDefaultValue()));
        TS_ASSERT_EQUALS(validRanges.size(), 3U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        auto& r3 = validRanges[2];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-200)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - (std::numeric_limits<double>::max())), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_LESS_THAN(0.0, r2.m_min);
        TS_ASSERT(std::isinf(r2.m_min));
        TS_ASSERT(std::isinf(r2.m_max));
        TS_ASSERT_EQUALS(r2.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(std::isnan(r3.m_min));
        TS_ASSERT(std::isnan(r3.m_max));
        TS_ASSERT_EQUALS(r3.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r3.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_EQUALS(specialValues.size(), 3U);
    } while (false);
}

void FloatTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    do {
        auto& ns = namespaces.front();
        TS_ASSERT(ns.parseName().empty());

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Double);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 8U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), 0.0);
        TS_ASSERT_EQUALS(floatField.parseValidCheckVersion(), true);
        TS_ASSERT_EQUALS(validRanges.size(), 2U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (std::numeric_limits<double>::lowest())), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - (std::numeric_limits<double>::max())), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, 1U);
        TS_ASSERT_LESS_THAN(std::abs(r2.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r2.m_max - (210.111)), Epsilon);
        TS_ASSERT_EQUALS(r2.m_sinceVersion, 1U);
        TS_ASSERT_EQUALS(r2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(specialValues.empty());
    } while (false);
}

void FloatTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test8()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), 0.0);
        TS_ASSERT_EQUALS(validRanges.size(), 1U);
        auto& r1 = validRanges[0];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - 210.111), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_EQUALS(specialValues.size(), 1U);
        auto& s1 = specialValues.find("S1")->second;
        TS_ASSERT_LESS_THAN(std::abs(s1.m_value - (-100.123)), Epsilon);
    } while (false);

    do {
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Float2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), -100.123);
        TS_ASSERT_EQUALS(validRanges.size(), 2U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-200.0)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - 210.111), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(std::isnan(r2.m_min));
        TS_ASSERT(std::isnan(r2.m_max));
        TS_ASSERT_EQUALS(specialValues.size(), 2U);
    } while (false);
}

void FloatTestSuite::test10()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Float2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& validRanges = floatField.parseValidRanges();
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(floatField.parseType(), commsdsl::parse::ParseFloatField::Type::Float);
        TS_ASSERT_EQUALS(floatField.parseEndian(), commsdsl::parse::ParseEndian_Little);
        TS_ASSERT_EQUALS(floatField.parseMinLength(), 4U);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), -100.123);
        TS_ASSERT_EQUALS(validRanges.size(), 3U);
        auto& r1 = validRanges[0];
        auto& r2 = validRanges[1];
        auto& r3 = validRanges[2];
        TS_ASSERT_LESS_THAN(std::abs(r1.m_min - (-200.0)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r1.m_max - (-100.123)), Epsilon);
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_LESS_THAN(std::abs(r2.m_min - (-100.123)), Epsilon);
        TS_ASSERT_LESS_THAN(std::abs(r2.m_max - 210.111), Epsilon);
        TS_ASSERT_EQUALS(r2.m_sinceVersion, 1U);
        TS_ASSERT_EQUALS(r2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(std::isnan(r3.m_min));
        TS_ASSERT(std::isnan(r3.m_max));
        TS_ASSERT_EQUALS(r1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(r1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_EQUALS(specialValues.size(), 2U);
        auto& s1 = specialValues.find("S1")->second;
        auto& s2 = specialValues.find("S2")->second;
        TS_ASSERT_EQUALS(s1.m_value, -100.123);
        TS_ASSERT_EQUALS(s1.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(s1.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT_EQUALS(s1.m_description, "Some description");
        TS_ASSERT_EQUALS(s2.m_value, -200);
        TS_ASSERT_EQUALS(s2.m_sinceVersion, 0U);
        TS_ASSERT_EQUALS(s2.m_deprecatedSince, commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
        TS_ASSERT(s2.m_description.empty());
    } while (false);
}

void FloatTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    do {
        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Float1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseUnits(), commsdsl::parse::ParseUnits::Seconds);
    } while (false);
}

void FloatTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT(std::isinf(floatField.parseDefaultValue()));
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(specialValues.size(), 1U);
        TS_ASSERT(std::isnan(specialValues.find("S1")->second.m_value));
    } while (false);
}

void FloatTestSuite::test13()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), static_cast<double>(0xffff));
    } while (false);
}

void FloatTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), static_cast<double>(3));
        auto& specialValues = floatField.parseSpecialValues();

        auto& s1 = specialValues.find("S1")->second;
        auto& s2 = specialValues.find("S2")->second;
        TS_ASSERT_EQUALS(s1.m_value, static_cast<double>(1));
        TS_ASSERT_EQUALS(s2.m_value, static_cast<double>(2));

    } while (false);
}

void FloatTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test18()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), static_cast<double>(0));
        auto& specialValues = floatField.parseSpecialValues();

        auto& s1 = specialValues.find("S1")->second;
        TS_ASSERT_EQUALS(s1.m_value, static_cast<double>(1));

    } while (false);
}

void FloatTestSuite::test19()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), static_cast<double>(1));
        auto& specialValues = floatField.parseSpecialValues();

        auto& s1 = specialValues.find("S1")->second;
        auto& s2 = specialValues.find("S2")->second;
        auto& s3 = specialValues.find("S3")->second;

        TS_ASSERT_EQUALS(s1.m_value, static_cast<double>(5));
        TS_ASSERT_EQUALS(s2.m_value, static_cast<double>(5.3));
        TS_ASSERT_EQUALS(s3.m_value, static_cast<double>(3.4));
    } while (false);
}

void FloatTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT_EQUALS(floatField.parseDefaultValue(), static_cast<double>(1));
        auto& specialValues = floatField.parseSpecialValues();

        auto& s1 = specialValues.find("S1")->second;
        auto& s2 = specialValues.find("S2")->second;
        auto& s3 = specialValues.find("S3")->second;

        TS_ASSERT_EQUALS(s1.m_value, static_cast<double>(5));
        TS_ASSERT_EQUALS(s2.m_value, static_cast<double>(5.3));
        TS_ASSERT_EQUALS(s3.m_value, static_cast<double>(3.4));
    } while (false);
}

void FloatTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    do {
        auto& field = fields.back();
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        TS_ASSERT(std::isnan(floatField.parseDefaultValue()));
        auto& specialValues = floatField.parseSpecialValues();

        auto& s1 = specialValues.find("S1")->second;
        auto& s2 = specialValues.find("S2")->second;

        TS_ASSERT(std::isinf(s1.m_value));
        TS_ASSERT(std::isinf(s2.m_value));
    } while (false);
}

void FloatTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void FloatTestSuite::test24()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    do {
        auto& ns = namespaces.front();
        TS_ASSERT(ns.parseName().empty());

        auto fields = ns.parseFields();
        TS_ASSERT_EQUALS(fields.size(), 1U);

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "F1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Float);

        commsdsl::parse::ParseFloatField floatField(field);
        auto& specialValues = floatField.parseSpecialValues();
        TS_ASSERT_EQUALS(specialValues.size(), 3U);
        auto s1 = specialValues.find("S1");
        auto s2 = specialValues.find("S2");
        auto s3 = specialValues.find("S3");

        TS_ASSERT_EQUALS(s1->second.m_displayName, "Special 1");
        TS_ASSERT(s2->second.m_displayName.empty());
        TS_ASSERT(s3->second.m_displayName.empty());
    } while (false);
}

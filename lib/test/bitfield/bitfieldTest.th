#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseBitfieldField.h"
#include "commsdsl/parse/ParseEnumField.h"
#include "commsdsl/parse/ParseSetField.h"

class BitfieldTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
};

void BitfieldTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void BitfieldTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void BitfieldTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(bitfieldField.parseBitLength(), 0U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
}

void BitfieldTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 1U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
}

void BitfieldTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 5U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield2");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 1U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
}

void BitfieldTestSuite::test4()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error); m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
}

void BitfieldTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 3U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(commsdsl::parse::ParseEnumField(mem1).parseBitLength(), 4U);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(commsdsl::parse::ParseSetField(mem2).parseBitLength(), 8U);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(commsdsl::parse::ParseIntField(mem3).parseBitLength(), 12U);
}

void BitfieldTestSuite::test6()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
}

void BitfieldTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Little);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 3U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
}

void BitfieldTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(bitfieldField.parseBitLength(), 0U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 2U);
}

void BitfieldTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void BitfieldTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "F2");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

    commsdsl::parse::ParseBitfieldField bitfieldField(field);
    TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(bitfieldField.parseBitLength(), 0U);
    auto members = bitfieldField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 2U);

    auto& mem1 = members[0];
    auto& mem2 = members[1];

    TS_ASSERT_EQUALS(mem1.parseBitLength(), 5U);
    TS_ASSERT_EQUALS(mem2.parseBitLength(), 3U);
}

void BitfieldTestSuite::test11()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
}

void BitfieldTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    do {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "F1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

        commsdsl::parse::ParseBitfieldField bitfieldField(field);
        TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 2U);
        TS_ASSERT_EQUALS(bitfieldField.parseBitLength(), 0U);
        TS_ASSERT_EQUALS(bitfieldField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);
        auto members = bitfieldField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 2U);

        auto& mem1 = members[0];
        auto& mem2 = members[1];

        TS_ASSERT_EQUALS(mem1.parseBitLength(), 14U);
        TS_ASSERT_EQUALS(mem2.parseBitLength(), 2U);
    } while (false);
}

void BitfieldTestSuite::test13()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    do {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "F2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

        commsdsl::parse::ParseBitfieldField bitfieldField(field);
        TS_ASSERT_EQUALS(bitfieldField.parseEndian(), commsdsl::parse::ParseEndian_Big);
        TS_ASSERT_EQUALS(bitfieldField.parseMinLength(), 2U);
        TS_ASSERT_EQUALS(bitfieldField.parseBitLength(), 0U);
        auto members = bitfieldField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 2U);

        auto& mem1 = members[0];
        auto& mem2 = members[1];

        TS_ASSERT_EQUALS(mem1.parseBitLength(), 14U);
        TS_ASSERT_EQUALS(mem2.parseBitLength(), 2U);

        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    } while (false);
}

void BitfieldTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& field = fields.front();
        TS_ASSERT_EQUALS(field.parseName(), "Bitfield1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

        commsdsl::parse::ParseBitfieldField bitfieldField(field);
        auto validCond = bitfieldField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::List);

        commsdsl::parse::ParseOptCondList validCondList(validCond);
        TS_ASSERT_EQUALS(validCondList.parseType(), commsdsl::parse::ParseOptCondList::Type::Or);
    }

    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Bitfield2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

        commsdsl::parse::ParseBitfieldField bitfieldField(field);
        auto validCond = bitfieldField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::List);
    }      

    {
        TS_ASSERT_LESS_THAN_EQUALS(3U, fields.size());

        auto& field = fields[2];
        TS_ASSERT_EQUALS(field.parseName(), "Bitfield3");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bitfield);

        commsdsl::parse::ParseBitfieldField bitfieldField(field);
        auto validCond = bitfieldField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    }      
}
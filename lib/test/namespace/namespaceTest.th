#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseNamespace.h"

class MessageTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
};

void MessageTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void MessageTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void MessageTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");
    TS_ASSERT_EQUALS(ns.description(), "NS1");
    TS_ASSERT(ns.namespaces().empty());
    TS_ASSERT_EQUALS(ns.fields().size(), 2U);
    TS_ASSERT(ns.messages().empty());
    TS_ASSERT(ns.extraAttributes().empty());
    TS_ASSERT(ns.extraElements().empty());
}

void MessageTestSuite::test2()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");
    TS_ASSERT_EQUALS(ns.description(), "NS1");
    TS_ASSERT(ns.namespaces().empty());
    TS_ASSERT_EQUALS(ns.fields().size(), 3U);
    TS_ASSERT(ns.messages().empty());
    TS_ASSERT(ns.extraAttributes().empty());
    TS_ASSERT(ns.extraElements().empty());
}

void MessageTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");
    TS_ASSERT_EQUALS(ns.description(), "NS1");
    TS_ASSERT(ns.namespaces().empty());
    TS_ASSERT_EQUALS(ns.fields().size(), 3U);
    TS_ASSERT(ns.messages().empty());
    auto& extraAttrs = ns.extraAttributes();
    auto& extraChildren = ns.extraElements();
    TS_ASSERT_EQUALS(extraAttrs.size(), 2U);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "extraAttr1");
    TS_ASSERT_EQUALS((++extraAttrs.begin())->first, "extraAttr2");
    TS_ASSERT_EQUALS(extraChildren.size(), 2U);
    TS_TRACE(extraChildren.front());
    TS_TRACE(extraChildren.back());
}

void MessageTestSuite::test4()
{
    m_status.m_preValidateFunc =
        [](commsdsl::parse::ParseProtocol& p)
        {
            p.addExpectedExtraPrefix("prefix.");
        };

    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");
    TS_ASSERT_EQUALS(ns.description(), "NS1");
    TS_ASSERT(ns.namespaces().empty());
    TS_ASSERT_EQUALS(ns.fields().size(), 3U);
    TS_ASSERT(ns.messages().empty());
    auto& extraAttrs = ns.extraAttributes();
    auto& extraChildren = ns.extraElements();
    TS_ASSERT_EQUALS(extraAttrs.size(), 2U);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "prefix.extraAttr1");
    TS_ASSERT_EQUALS((++extraAttrs.begin())->first, "prefix.extraAttr2");
    TS_ASSERT_EQUALS(extraChildren.size(), 2U);
    TS_TRACE(extraChildren.front());
    TS_TRACE(extraChildren.back());
}

void MessageTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& globalNs = namespaces.front();
    TS_ASSERT_EQUALS(globalNs.name(), "global");

    auto innerNamespaces = globalNs.namespaces();
    TS_ASSERT_EQUALS(innerNamespaces.size(), 1U);

    auto& ns = innerNamespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");
    TS_ASSERT_EQUALS(ns.description(), "NS1");
    TS_ASSERT(ns.namespaces().empty());
    TS_ASSERT_EQUALS(ns.fields().size(), 3U);
    TS_ASSERT(ns.messages().empty());
    auto& extraAttrs = ns.extraAttributes();
    auto& extraChildren = ns.extraElements();
    TS_ASSERT_EQUALS(extraAttrs.size(), 2U);
    TS_ASSERT_EQUALS(extraAttrs.begin()->first, "extraAttr1");
    TS_ASSERT_EQUALS((++extraAttrs.begin())->first, "extraAttr2");
    TS_ASSERT_EQUALS(extraChildren.size(), 2U);
    TS_TRACE(extraChildren.front());
    TS_TRACE(extraChildren.back());
}

#include <algorithm>
#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseBundleField.h"
#include "commsdsl/parse/ParseIntField.h"
#include "commsdsl/parse/ParseListField.h"

class ListTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();
    void test31();
    void test32();
    void test33();
    void test34();
    void test35();
    void test36();
    void test37();
    void test38();    
    void test39();
    void test40();
    void test41();
    void test42();
    void test43();
};

void ListTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void ListTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void ListTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::size_t>::max());

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.parseHasCountPrefixField(), false);
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasLengthPrefixField(), false);
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 30U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), 30U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 10U);
    TS_ASSERT_EQUALS(listField.parseHasCountPrefixField(), false);
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasLengthPrefixField(), false);
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint16_t>::max() * 2U + 2U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.parseHasCountPrefixField(), true);
    auto countPrefixField = listField.parseCountPrefixField();
    TS_ASSERT(countPrefixField.parseValid());
    TS_ASSERT_EQUALS(countPrefixField.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(listField.parseHasLengthPrefixField(), false);
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 2U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint16_t>::max() + 2U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.parseHasCountPrefixField(), false);
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasLengthPrefixField(), true);
    TS_ASSERT(listField.parseLengthPrefixField().parseValid());
    TS_ASSERT_EQUALS(commsdsl::parse::ParseIntField(listField.parseLengthPrefixField()).parseEndian(), commsdsl::parse::ParseEndian_Big);
    TS_ASSERT_EQUALS(listField.parseHasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test5()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 15U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), 15U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 5U);
    TS_ASSERT(!listField.parseHasCountPrefixField());
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseHasElemLengthPrefixField());
    TS_ASSERT(listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 11U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), 11U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 5U);
    TS_ASSERT(!listField.parseHasCountPrefixField());
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseHasElemLengthPrefixField());
    TS_ASSERT(listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseElemFixedLength());
}

void ListTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint8_t>::max() * 3U + 1U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT(listField.parseHasCountPrefixField());
    TS_ASSERT(listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseHasElemLengthPrefixField());
    TS_ASSERT(listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint8_t>::max() * 2U + 2U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT(listField.parseHasCountPrefixField());
    TS_ASSERT(listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseHasElemLengthPrefixField());
    TS_ASSERT(listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(listField.parseElemFixedLength());
}

void ListTestSuite::test9()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 4U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint8_t>::max() + 1U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT(!listField.parseHasCountPrefixField());
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT(listField.parseHasLengthPrefixField());
    TS_ASSERT(listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseLengthPrefixField().parseExternalRef().empty());
    TS_ASSERT(listField.parseHasElemLengthPrefixField());
    TS_ASSERT(listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseExternalRef().empty());
    TS_ASSERT(listField.parseElemFixedLength());
}

void ListTestSuite::test10()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::uint8_t>::max());

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT(!listField.parseHasCountPrefixField());
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT(listField.parseHasLengthPrefixField());
    TS_ASSERT(listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseLengthPrefixField().parseExternalRef().empty());
    TS_ASSERT(!listField.parseHasElemLengthPrefixField());
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 5U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), 20U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT(!elem.parseExternalRef().empty());
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 5U);
    TS_ASSERT(!listField.parseHasCountPrefixField());
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasElemLengthPrefixField());
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test13()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 1U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), (0x3fff * 4U) + 2U);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT(!elem.parseExternalRef().empty());
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT(listField.parseHasCountPrefixField());
    TS_ASSERT(listField.parseCountPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasLengthPrefixField());
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseHasElemLengthPrefixField());
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test16()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test18()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test19()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);
    TS_ASSERT_EQUALS(field.parseName(), "B1");

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 6U);

    auto& l1 = members[3];
    auto& l2 = members[4];
    auto& l3 = members[5];

    TS_ASSERT_EQUALS(l1.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(l2.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(l3.parseKind(), commsdsl::parse::ParseField::ParseKind::List);

    commsdsl::parse::ParseListField list1(l1);
    commsdsl::parse::ParseListField list2(l2);
    commsdsl::parse::ParseListField list3(l3);

    TS_ASSERT_EQUALS(list1.parseDetachedCountPrefixFieldName(), "P1");
    TS_ASSERT(!list1.parseHasCountPrefixField());
    TS_ASSERT(!list1.parseHasLengthPrefixField());
    TS_ASSERT(!list1.parseHasElemLengthPrefixField());

    TS_ASSERT_EQUALS(list2.parseDetachedLengthPrefixFieldName(), "P2");
    TS_ASSERT(!list2.parseHasCountPrefixField());
    TS_ASSERT(!list2.parseHasLengthPrefixField());
    TS_ASSERT(!list2.parseHasElemLengthPrefixField());

    TS_ASSERT_EQUALS(list3.parseDetachedElemLengthPrefixFieldName(), "P3");
    TS_ASSERT(!list3.parseHasCountPrefixField());
    TS_ASSERT(!list3.parseHasLengthPrefixField());
    TS_ASSERT(!list3.parseHasElemLengthPrefixField());
}

void ListTestSuite::test21()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test22()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test24()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);
    TS_ASSERT_EQUALS(field.parseName(), "B1");

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 2U);

    auto& l1 = members[1];
    TS_ASSERT_EQUALS(l1.parseKind(), commsdsl::parse::ParseField::ParseKind::List);

    commsdsl::parse::ParseListField list1(l1);

    TS_ASSERT_EQUALS(list1.parseDetachedCountPrefixFieldName(), "P1");
    TS_ASSERT(!list1.parseHasCountPrefixField());
    TS_ASSERT(!list1.parseHasLengthPrefixField());
    TS_ASSERT(!list1.parseHasElemLengthPrefixField());
}

void ListTestSuite::test25()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);
    TS_ASSERT_EQUALS(field.parseName(), "B1");

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 2U);

    auto& l1 = members[1];
    TS_ASSERT_EQUALS(l1.parseKind(), commsdsl::parse::ParseField::ParseKind::List);

    commsdsl::parse::ParseListField list1(l1);

    TS_ASSERT_EQUALS(list1.parseDetachedLengthPrefixFieldName(), "P1");
    TS_ASSERT(!list1.parseHasCountPrefixField());
    TS_ASSERT(!list1.parseHasLengthPrefixField());
    TS_ASSERT(!list1.parseHasElemLengthPrefixField());
}

void ListTestSuite::test26()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);
    TS_ASSERT_EQUALS(field.parseName(), "B1");

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 2U);

    auto& l1 = members[1];
    TS_ASSERT_EQUALS(l1.parseKind(), commsdsl::parse::ParseField::ParseKind::List);

    commsdsl::parse::ParseListField list1(l1);

    TS_ASSERT_EQUALS(list1.parseDetachedElemLengthPrefixFieldName(), "P1");
    TS_ASSERT(!list1.parseHasCountPrefixField());
    TS_ASSERT(!list1.parseHasLengthPrefixField());
    TS_ASSERT(!list1.parseHasElemLengthPrefixField());
}

void ListTestSuite::test27()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test28()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test29()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test30()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "List1");
    TS_ASSERT(field.parseDisplayName().empty());
    TS_ASSERT(field.parseDescription().empty());
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
    TS_ASSERT_EQUALS(field.parseMinLength(), 0U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::size_t>::max());

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
    TS_ASSERT_EQUALS(listField.parseHasCountPrefixField(), false);
    TS_ASSERT(!listField.parseCountPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasLengthPrefixField(), false);
    TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
    TS_ASSERT_EQUALS(listField.parseHasElemLengthPrefixField(), false);
    TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test32()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema32.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test33()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema33.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test34()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema34.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test35()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema35.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test36()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema36.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test37()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema37.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test38()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema38.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test39()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema39.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.parseName(), "List50");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::ParseKind::List);

    commsdsl::parse::ParseListField listField(field);
    auto elem = listField.parseElementField();
    TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    TS_ASSERT(!listField.parseElemFixedLength());
}

void ListTestSuite::test40()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema40.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto iter =
        std::find_if(
            fields.begin(), fields.end(),
            [](auto& f)
            {
                return f.parseKind() == commsdsl::parse::ParseField::ParseKind::List;
            });
    TS_ASSERT_DIFFERS(iter, fields.end());

    commsdsl::parse::ParseListField listField(*iter);
    TS_ASSERT_EQUALS(listField.parseName(), "List");
    TS_ASSERT_EQUALS(listField.parseMaxLength(), std::numeric_limits<std::size_t>::max());
}

void ListTestSuite::test41()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema41.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.parseName(), "ns1");

    auto fields = ns.parseFields();
    auto parseFindField = 
        [&fields](const std::string& name) -> const commsdsl::parse::ParseField*
        {
            auto iter = 
                std::find_if(
                    fields.begin(), fields.end(),
                    [&name](auto& f)
                    {
                        return f.parseName() == name;
                    });

            if (iter == fields.end()) {
                return nullptr;
            }

            return &(*iter);
        };

    do {
        auto* field = parseFindField("L1");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        TS_ASSERT_EQUALS(field->parseMinLength(), 1U);

        commsdsl::parse::ParseListField listField(*field);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(!listField.parseHasCountPrefixField());
        TS_ASSERT(!listField.parseCountPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasLengthPrefixField());
        TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasElemLengthPrefixField());
        TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseElemFixedLength());
        TS_ASSERT(listField.parseHasTermSuffixField());
        TS_ASSERT(listField.parseTermSuffixField().parseValid());
        TS_ASSERT_EQUALS(listField.parseTermSuffixField().parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    } while (false);

    do {
        auto* field = parseFindField("L2");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        TS_ASSERT_EQUALS(field->parseMinLength(), 2U);

        commsdsl::parse::ParseListField listField(*field);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(!listField.parseHasCountPrefixField());
        TS_ASSERT(!listField.parseCountPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasLengthPrefixField());
        TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasElemLengthPrefixField());
        TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseElemFixedLength());
        TS_ASSERT(listField.parseHasTermSuffixField());
        TS_ASSERT(listField.parseTermSuffixField().parseValid());
        TS_ASSERT_EQUALS(listField.parseTermSuffixField().parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    } while (false);    

    do {
        auto* field = parseFindField("L3");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        TS_ASSERT_EQUALS(field->parseMinLength(), 2U);

        commsdsl::parse::ParseListField listField(*field);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(!listField.parseHasCountPrefixField());
        TS_ASSERT(!listField.parseCountPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasLengthPrefixField());
        TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasElemLengthPrefixField());
        TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseElemFixedLength());
        TS_ASSERT(listField.parseHasTermSuffixField());
        TS_ASSERT(listField.parseTermSuffixField().parseValid());
        TS_ASSERT_EQUALS(listField.parseTermSuffixField().parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
    } while (false);      

    do {
        auto* field = parseFindField("L4");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        TS_ASSERT_EQUALS(field->parseMinLength(), 1U);

        commsdsl::parse::ParseListField listField(*field);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(!listField.parseHasCountPrefixField());
        TS_ASSERT(!listField.parseCountPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasLengthPrefixField());
        TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasElemLengthPrefixField());
        TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseElemFixedLength());
        TS_ASSERT(listField.parseHasTermSuffixField());
        TS_ASSERT(listField.parseTermSuffixField().parseValid());
        TS_ASSERT_EQUALS(listField.parseTermSuffixField().parseKind(), commsdsl::parse::ParseField::ParseKind::Int);

        commsdsl::parse::ParseIntField termField(listField.parseTermSuffixField());
        TS_ASSERT_EQUALS(termField.parseType(), commsdsl::parse::ParseIntField::ParseType::Uint8);
    } while (false);        

    do {
        auto* field = parseFindField("B1");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(*field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& lastField = members.back();
        TS_ASSERT_EQUALS(lastField.parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        commsdsl::parse::ParseListField listField(lastField);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(!listField.parseHasCountPrefixField());
        TS_ASSERT(!listField.parseCountPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasLengthPrefixField());
        TS_ASSERT(!listField.parseLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseHasElemLengthPrefixField());
        TS_ASSERT(!listField.parseElemLengthPrefixField().parseValid());
        TS_ASSERT(!listField.parseElemFixedLength());
        TS_ASSERT(!listField.parseHasTermSuffixField());
        TS_ASSERT(!listField.parseTermSuffixField().parseValid());
        TS_ASSERT_EQUALS(listField.parseDetachedTermSuffixFieldName(), "TermSuffix");
    } while (false);      

}

void ListTestSuite::test42()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema42.xml");
    TS_ASSERT(protocol);
}

void ListTestSuite::test43()
{
    std::vector<std::string> schemas = {
        SCHEMAS_DIR "/Schema43_1.xml",
        SCHEMAS_DIR "/Schema43_2.xml",
    };
    auto protocol = prepareProtocol(schemas, true);
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    auto parseFindField = 
        [&fields](const std::string& name) -> const commsdsl::parse::ParseField*
        {
            auto iter = 
                std::find_if(
                    fields.begin(), fields.end(),
                    [&name](auto& f)
                    {
                        return f.parseName() == name;
                    });

            if (iter == fields.end()) {
                return nullptr;
            }

            return &(*iter);
        };

    do {
        auto* field = parseFindField("L1");
        TS_ASSERT(field != nullptr);
        TS_ASSERT_EQUALS(field->parseKind(), commsdsl::parse::ParseField::ParseKind::List);
        TS_ASSERT_EQUALS(field->parseMinLength(), 1U);

        commsdsl::parse::ParseListField listField(*field);
        auto elem = listField.parseElementField();
        TS_ASSERT_EQUALS(elem.parseKind(), commsdsl::parse::ParseField::ParseKind::Int);
        TS_ASSERT(elem.parseExternalRef().empty());
        TS_ASSERT_EQUALS(listField.parseFixedCount(), 0U);
        TS_ASSERT(listField.parseHasCountPrefixField());
    } while (false);
}

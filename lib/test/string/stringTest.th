#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseStringField.h"

class StringTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();
    void test17();
    void test18();
    void test19();
    void test20();
    void test21();
    void test22();
    void test23();
    void test24();
    void test25();
    void test26();
    void test27();
    void test28();
    void test29();
    void test30();
    void test31();
};

void StringTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void StringTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void StringTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 0U);
    TS_ASSERT_EQUALS(field.maxLength(), std::numeric_limits<std::size_t>::max());

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());
}

void StringTestSuite::test2()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT(field.displayName().empty());
    TS_ASSERT(field.description().empty());
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    TS_ASSERT_EQUALS(stringField.fixedLength(), 4U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());
}

void StringTestSuite::test3()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), true);
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());

    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT(lenField.valid());
    TS_ASSERT_EQUALS(lenField.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(lenField.externalRef(), "@Schema3.StrLen");
}

void StringTestSuite::test4()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.name(), "String1");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), true);
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());

    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT(lenField.valid());
    TS_ASSERT_EQUALS(lenField.kind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT(lenField.externalRef().empty());
}

void StringTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test6()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test7()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "String2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 10U);
    TS_ASSERT_EQUALS(field.maxLength(), 10U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    TS_ASSERT_EQUALS(stringField.fixedLength(), 10U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());
}

void StringTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "String2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 4U);
    TS_ASSERT_EQUALS(field.maxLength(), 4U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    TS_ASSERT_EQUALS(stringField.fixedLength(), 4U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), false);
    TS_ASSERT(!stringField.lengthPrefixField().valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());
}

void StringTestSuite::test10()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT_EQUALS(ns.name(), "ns1");

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "String2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 1U);
    TS_ASSERT_EQUALS(field.maxLength(), 256U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT_EQUALS(stringField.hasLengthPrefixField(), true);
    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT(lenField.valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
    TS_ASSERT_EQUALS(lenField.externalRef(), "@Schema11.ns1.Prefix");
    TS_ASSERT(stringField.detachedPrefixFieldName().empty());
}

void StringTestSuite::test12()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test13()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test14()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg = messages.front();
    auto fields = msg.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 0U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT(!stringField.hasLengthPrefixField());
    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT_EQUALS(stringField.detachedPrefixFieldName(), "F1");
    TS_ASSERT(!lenField.valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
}

void StringTestSuite::test15()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test16()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema16.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto messages = ns.messages();
    TS_ASSERT_EQUALS(messages.size(), 1U);

    auto& msg = messages.front();
    auto fields = msg.fields();
    TS_ASSERT_EQUALS(fields.size(), 3U);

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);
    TS_ASSERT_EQUALS(field.minLength(), 0U);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT(stringField.defaultValue().empty());
    TS_ASSERT_EQUALS(stringField.fixedLength(), 0U);
    TS_ASSERT(!stringField.hasLengthPrefixField());
    auto lenField = stringField.lengthPrefixField();
    TS_ASSERT_EQUALS(stringField.detachedPrefixFieldName(), "F1");
    TS_ASSERT(!lenField.valid());
    TS_ASSERT(!stringField.hasZeroTermSuffix());
}

void StringTestSuite::test17()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema17.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test18()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema18.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test19()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema19.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test20()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema20.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "S2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
}

void StringTestSuite::test21()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema21.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "S2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "^S1");
}

void StringTestSuite::test22()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema22.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();
    TS_ASSERT_EQUALS(fields.size(), 6U);

    do {
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.name(), "S1");
        TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseStringField stringField(field);
        TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    } while (false);

    do {
        auto& field = fields[2];
        TS_ASSERT_EQUALS(field.name(), "S2");
        TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseStringField stringField(field);
        TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
    } while (false);

    do {
        auto& field = fields[3];
        TS_ASSERT_EQUALS(field.name(), "S3");
        TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseStringField stringField(field);
        TS_ASSERT_EQUALS(stringField.defaultValue(), "^S1");
    } while (false);

    do {
        auto& field = fields[4];
        TS_ASSERT_EQUALS(field.name(), "S4");
        TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseStringField stringField(field);
        TS_ASSERT_EQUALS(stringField.defaultValue(), "\\\\\\^S1");
    } while (false);

    do {
        auto& field = fields[5];
        TS_ASSERT_EQUALS(field.name(), "S5");
        TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseStringField stringField(field);
        TS_ASSERT_EQUALS(stringField.defaultValue(), "\\.\\\\\\^S1");
    } while (false);
}

void StringTestSuite::test23()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema23.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test24()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema24.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test25()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema25.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "S2");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
}

void StringTestSuite::test26()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema26.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test27()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema27.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello");
}

void StringTestSuite::test28()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema28.xml");
    TS_ASSERT(protocol);
}

void StringTestSuite::test29()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema29.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F4");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "hello!");
}

void StringTestSuite::test30()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema30.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    auto& field = fields.back();
    TS_ASSERT_EQUALS(field.name(), "F3");
    TS_ASSERT_EQUALS(field.kind(), commsdsl::parse::ParseField::Kind::String);

    commsdsl::parse::ParseStringField stringField(field);
    TS_ASSERT_EQUALS(stringField.defaultValue(), "bla");
}

void StringTestSuite::test31()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema31.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->lastParsedSchema().namespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.name().empty());

    auto fields = ns.fields();

    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& field = fields.front();
        TS_ASSERT_EQUALS(field.name(), "String1");

        commsdsl::parse::ParseStringField stringField(field);
        auto& validValues = stringField.validValues();
        TS_ASSERT_EQUALS(validValues.size(), 3U)
        TS_ASSERT_EQUALS(validValues[0].m_value, "bla1");
        TS_ASSERT_EQUALS(validValues[0].m_sinceVersion, 1);
        TS_ASSERT_EQUALS(validValues[0].m_deprecatedSince, 4);
        TS_ASSERT_EQUALS(validValues[1].m_value, "bla2");
        TS_ASSERT_EQUALS(validValues[1].m_sinceVersion, 3);
        TS_ASSERT_EQUALS(validValues[1].m_deprecatedSince, protocol->notYetDeprecated());    
        TS_ASSERT_EQUALS(validValues[2].m_value, "bla3");
        TS_ASSERT_EQUALS(validValues[2].m_sinceVersion, 0);
        TS_ASSERT_EQUALS(validValues[2].m_deprecatedSince, protocol->notYetDeprecated());  
    }   

    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.name(), "String2");

        commsdsl::parse::ParseStringField stringField(field);
        auto& validValues = stringField.validValues();
        TS_ASSERT_EQUALS(validValues.size(), 4U)
        TS_ASSERT_EQUALS(validValues[0].m_value, "bla1");
        TS_ASSERT_EQUALS(validValues[0].m_sinceVersion, 1);
        TS_ASSERT_EQUALS(validValues[0].m_deprecatedSince, 4);
        TS_ASSERT_EQUALS(validValues[1].m_value, "bla2");
        TS_ASSERT_EQUALS(validValues[1].m_sinceVersion, 3);
        TS_ASSERT_EQUALS(validValues[1].m_deprecatedSince, protocol->notYetDeprecated());    
        TS_ASSERT_EQUALS(validValues[2].m_value, "bla3");
        TS_ASSERT_EQUALS(validValues[2].m_sinceVersion, 0);
        TS_ASSERT_EQUALS(validValues[2].m_deprecatedSince, protocol->notYetDeprecated());  
        TS_ASSERT_EQUALS(validValues[3].m_value, "bla4");
        TS_ASSERT_EQUALS(validValues[3].m_sinceVersion, 0);
        TS_ASSERT_EQUALS(validValues[3].m_deprecatedSince, protocol->notYetDeprecated());          
    }        
}

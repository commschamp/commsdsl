#include <limits>

#include "CommonTestSuite.h"

#include "commsdsl/parse/ParseBundleField.h"
#include "commsdsl/parse/ParseEnumField.h"
#include "commsdsl/parse/ParseSetField.h"

class BundleTestSuite : public CommonTestSuite, public CxxTest::TestSuite
{
public:
    void setUp();
    void tearDown();
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
};

void BundleTestSuite::setUp()
{
    CommonTestSuite::commonSetUp();
}

void BundleTestSuite::tearDown()
{
    CommonTestSuite::commonTearDown();
}

void BundleTestSuite::test1()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema1.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 1U);

    auto& field = fields.front();
    TS_ASSERT_EQUALS(field.parseName(), "Bundle1");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.parseMinLength(), 3U);
    TS_ASSERT_EQUALS(field.parseBitLength(), 0U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 3U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
}

void BundleTestSuite::test2()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema2.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.parseMinLength(), 7U);

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 4U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    auto& mem4 = members[3];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem3.parseSinceVersion(), 1U);
    TS_ASSERT_EQUALS(mem3.parseDeprecatedSince(), 2U);
    TS_ASSERT(mem3.parseIsDeprecatedRemoved());
    TS_ASSERT_EQUALS(mem4.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem4.parseSinceVersion(), 0U);
    TS_ASSERT_EQUALS(mem4.parseDeprecatedSince(), commsdsl::parse::ParseProtocol::parseNotYetDeprecated());
    TS_ASSERT(!mem4.parseIsDeprecatedRemoved());
}

void BundleTestSuite::test3()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema3.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test4()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema4.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test5()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema5.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test6()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema6.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.parseMinLength(), 4U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), 10U);
    TS_ASSERT_EQUALS(field.parseCopyCodeFrom(), std::string("Bundle1"));

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 4U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    auto& mem4 = members[3];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem4.parseKind(), commsdsl::parse::ParseField::Kind::Int);
}

void BundleTestSuite::test7()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema7.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
    TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);
    TS_ASSERT_EQUALS(field.parseMinLength(), 4U);
    TS_ASSERT_EQUALS(field.parseMaxLength(), std::numeric_limits<std::size_t>::max());

    commsdsl::parse::ParseBundleField bundleField(field);
    auto members = bundleField.parseMembers();
    TS_ASSERT_EQUALS(members.size(), 5U);
    auto& mem1 = members[0];
    auto& mem2 = members[1];
    auto& mem3 = members[2];
    auto& mem4 = members[3];
    auto& mem5 = members[4];
    TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem4.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    TS_ASSERT_EQUALS(mem5.parseKind(), commsdsl::parse::ParseField::Kind::String);
}

void BundleTestSuite::test8()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema8.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    do {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Bundle1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Set);
        
        commsdsl::parse::ParseIntField intField(mem2);
        TS_ASSERT_EQUALS(intField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);
    } while (false);

    do {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::String);
        
        commsdsl::parse::ParseBundleField lengthField(mem2);
        TS_ASSERT_EQUALS(lengthField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);
        TS_ASSERT_EQUALS(lengthField.parseValueOverride(), commsdsl::parse::ParseOverrideType_Replace);
    } while (false);    
}

void BundleTestSuite::test9()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema9.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test10()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema10.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test11()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema11.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    do {
        TS_ASSERT(!fields.empty());
        auto& field = fields.front();
        TS_ASSERT_EQUALS(field.parseName(), "B1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Int);
    
        commsdsl::parse::ParseIntField lengthField(mem2);
        TS_ASSERT_EQUALS(lengthField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);    

        commsdsl::parse::ParseIntField valueField(mem3);
        TS_ASSERT(valueField.parseAvailableLengthLimit());
    } while (false);

    do {
        TS_ASSERT(2U <= fields.size());
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "B2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Enum);
    
        commsdsl::parse::ParseIntField lengthField(mem2);
        TS_ASSERT_EQUALS(lengthField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);    

        commsdsl::parse::ParseEnumField valueField(mem3);
        TS_ASSERT(valueField.parseAvailableLengthLimit());
    } while (false);    

    do {
        TS_ASSERT(3U <= fields.size());
        auto& field = fields[2];
        TS_ASSERT_EQUALS(field.parseName(), "B3");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::Set);
    
        commsdsl::parse::ParseIntField lengthField(mem2);
        TS_ASSERT_EQUALS(lengthField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);    

        commsdsl::parse::ParseSetField valueField(mem3);
        TS_ASSERT(valueField.parseAvailableLengthLimit());
    } while (false);        
}


void BundleTestSuite::test12()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema12.xml");
    TS_ASSERT(protocol);

    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    do {
        TS_ASSERT(2U <= fields.size());
        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "B2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        TS_ASSERT(!bundleField.parseValidCond().parseValid());        
        auto members = bundleField.parseMembers();
        TS_ASSERT_EQUALS(members.size(), 3U);
        auto& mem1 = members[0];
        auto& mem2 = members[1];
        auto& mem3 = members[2];
        TS_ASSERT_EQUALS(mem1.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem2.parseKind(), commsdsl::parse::ParseField::Kind::Int);
        TS_ASSERT_EQUALS(mem3.parseKind(), commsdsl::parse::ParseField::Kind::String);

        commsdsl::parse::ParseIntField typeField(mem1);
        TS_ASSERT_EQUALS(typeField.parseDefaultValue(), 2);    
    
        commsdsl::parse::ParseIntField lengthField(mem2);
        TS_ASSERT_EQUALS(lengthField.parseSemanticType(), commsdsl::parse::ParseField::SemanticType::Length);    
    } while (false);    
}

void BundleTestSuite::test13()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Error);
    m_status.m_expValidateResult = false;
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema13.xml");
    TS_ASSERT(protocol);
}

void BundleTestSuite::test14()
{
    m_status.m_expErrors.push_back(commsdsl::parse::ParseErrorLevel_Warning);
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema14.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    TS_ASSERT_EQUALS(fields.size(), 2U);

    auto& field = fields[1];
    TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
    TS_ASSERT(field.parseCopyCodeFrom().empty());
}

void BundleTestSuite::test15()
{
    auto protocol = prepareProtocol(SCHEMAS_DIR "/Schema15.xml");
    TS_ASSERT(protocol);
    auto namespaces = protocol->parseLastParsedSchema().parseNamespaces();
    TS_ASSERT_EQUALS(namespaces.size(), 1U);

    auto& ns = namespaces.front();
    TS_ASSERT(ns.parseName().empty());

    auto fields = ns.parseFields();
    {
        TS_ASSERT_LESS_THAN_EQUALS(1U, fields.size());

        auto& field = fields[0];
        TS_ASSERT_EQUALS(field.parseName(), "Bundle1");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto validCond = bundleField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::List);

        commsdsl::parse::ParseOptCondList validCondList(validCond);
        TS_ASSERT_EQUALS(validCondList.parseType(), commsdsl::parse::ParseOptCondList::Type::Or);
    }

    {
        TS_ASSERT_LESS_THAN_EQUALS(2U, fields.size());

        auto& field = fields[1];
        TS_ASSERT_EQUALS(field.parseName(), "Bundle2");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto validCond = bundleField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::List);
    }    

    {
        TS_ASSERT_LESS_THAN_EQUALS(3U, fields.size());

        auto& field = fields[2];
        TS_ASSERT_EQUALS(field.parseName(), "Bundle3");
        TS_ASSERT_EQUALS(field.parseKind(), commsdsl::parse::ParseField::Kind::Bundle);

        commsdsl::parse::ParseBundleField bundleField(field);
        auto validCond = bundleField.parseValidCond();
        TS_ASSERT(validCond.parseValid());
        TS_ASSERT_EQUALS(validCond.parseKind(), commsdsl::parse::ParseOptCond::Kind::Expr);
    }      
}

